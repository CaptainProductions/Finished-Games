/*
     
    UPDATE: Fixed Nobody's impossible stage.
     
HOORAY!

Thank you all for playing The Acid Trilogy. Here are some of my favorite reviews from all 3 games. ^_______^

Acid Escape:

        Review:
        Don't know why a factory would manufacture acid, but cool game anyway! - AzureDawn
        
        My response - Idk either. :P


The Forest

        Review:
        Awesome! A great continuation of The Acid Escape! Not to mention the amazing graphics! - Trivial Master
        
        My response - Thanks :D. I like to work hard on my graphics.
        
        
The Factory

        Review: 
        A nice ending to an amazing trilogy. As always, the graphics were excellent. I also appreciated the fact that you tried something different for the level design by adding a camera (allowing larger levels).
        
        My response - Thanks! It's _amazing_? Let's see how many spam flags this'll get xD
        

*/
var mouse = {
    clicked: false,
    overButton: false,
};
var keys = [];
var blocks = [];
var currentLevel = 0;
var scene = "loading";
var numOfGems = 0;
var numOfCoins = 0;
var screenx = 0;
var screeny = 0;
var cacheImageNo = 0;
var x = 0.1;
var acidY = 600;
var textSelection = 0;
var isFading = false;
var fade = 0;


var cacheImage = function(imgFunction, w, h) {
    var c = createGraphics(w, h, JAVA2D);
    if (!c) {
        return;
    }

    c = imgFunction(c);

    return (c.get());
};

/** --- RENDERING & INPUT --- **/
var PreCache = {
    bg: {
        width: width,
        height: height,
        img: function(c) {
            c.background(255);
            c.strokeWeight(22);
            for (var i = 0; i < height; i += 10) {
                c.stroke(lerpColor(color(200, 0, 0), color(255, 136, 0), i / height));
                c.line(0, i, width, i);
            }

            for (var Size = 79; Size < 600; Size += 10) {
                c.fill(0, 0, 0, 10);
                c.noStroke();
                c.rect(0, 799, width, -Size);
            }


            return c;
        },
    },
    pirate: {
        width: 60,
        height: 50,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.pushMatrix();
            c.translate(70, 70);
            c.scale(0.03);
            c.angleMode = "degrees";
            c.rotate(180);
            c.noStroke();
            c.fill(255);
            c.beginShape();
            c.vertex(1255, 2123);
            c.bezierVertex(1164, 2113, 1065, 2053, 1030, 1985);
            c.bezierVertex(984, 1896, 865, 1815, 692, 1754);
            c.bezierVertex(663, 1744, 641, 1731, 643, 1725);
            c.bezierVertex(648, 1710, 864, 1616, 999, 1570);
            c.bezierVertex(1194, 1504, 1305, 1486, 1525, 1485);
            c.bezierVertex(1734, 1485, 1800, 1495, 1960, 1554);
            c.vertex(2045, 1585);
            c.vertex(1963, 1591);
            c.bezierVertex(1904, 1595, 1866, 1605, 1826, 1624);
            c.bezierVertex(1764, 1655, 1686, 1734, 1654, 1801);
            c.bezierVertex(1642, 1825, 1620, 1870, 1605, 1901);
            c.bezierVertex(1534, 2049, 1394, 2137, 1255, 2123);
            c.endShape();
            c.beginShape();
            c.vertex(1140, 1936);
            c.bezierVertex(1152, 1903, 1186, 1885, 1206, 1901);
            c.bezierVertex(1215, 1908, 1236, 1910, 1266, 1906);
            c.bezierVertex(1308, 1901, 1312, 1902, 1328, 1930);
            c.bezierVertex(1348, 1965, 1360, 1967, 1385, 1940);
            c.bezierVertex(1408, 1915, 1399, 1894, 1362, 1887);
            c.bezierVertex(1335, 1881, 1332, 1877, 1328, 1833);
            c.bezierVertex(1323, 1780, 1332, 1760, 1362, 1760);
            c.bezierVertex(1386, 1760, 1396, 1734, 1380, 1715);
            c.bezierVertex(1365, 1697, 1330, 1695, 1330, 1713);
            c.bezierVertex(1330, 1720, 1325, 1731, 1318, 1738);
            c.bezierVertex(1309, 1747, 1301, 1743, 1284, 1725);
            c.bezierVertex(1271, 1711, 1257, 1700, 1251, 1700);
            c.bezierVertex(1240, 1700, 1214, 1724, 1202, 1747);
            c.bezierVertex(1191, 1766, 1172, 1756, 1160, 1724);
            c.bezierVertex(1148, 1694, 1139, 1694, 1111, 1724);
            c.bezierVertex(1085, 1752, 1090, 1770, 1124, 1770);
            c.bezierVertex(1155, 1770, 1171, 1791, 1168, 1829);
            c.bezierVertex(1166, 1863, 1135, 1890, 1100, 1890);
            c.bezierVertex(1072, 1890, 1064, 1917, 1085, 1940);
            c.bezierVertex(1109, 1967, 1129, 1965, 1140, 1936);
            c.endShape();
            c.beginShape();
            c.vertex(1280, 1840);
            c.bezierVertex(1267, 1832, 1268, 1830, 1283, 1830);
            c.bezierVertex(1292, 1830, 1300, 1835, 1300, 1840);
            c.bezierVertex(1300, 1852, 1299, 1852, 1280, 1840);
            c.endShape();
            c.beginShape();
            c.vertex(1004, 1505);
            c.bezierVertex(965, 1466, 980, 1410, 1037, 1381);
            c.bezierVertex(1081, 1359, 1140, 1401, 1140, 1455);
            c.bezierVertex(1140, 1494, 1138, 1496, 1074, 1515);
            c.bezierVertex(1030, 1528, 1027, 1528, 1004, 1505);
            c.endShape();
            c.beginShape();
            c.vertex(1808, 1477);
            c.bezierVertex(1777, 1468, 1770, 1461, 1759, 1423);
            c.bezierVertex(1753, 1399, 1731, 1361, 1710, 1338);
            c.vertex(1673, 1296);
            c.vertex(1637, 1324);
            c.bezierVertex(1617, 1340, 1600, 1357, 1600, 1362);
            c.bezierVertex(1600, 1367, 1609, 1388, 1619, 1409);
            c.vertex(1639, 1447);
            c.vertex(1472, 1453);
            c.bezierVertex(1380, 1456, 1297, 1461, 1288, 1465);
            c.bezierVertex(1263, 1475, 1265, 1447, 1291, 1401);
            c.bezierVertex(1337, 1318, 1445, 1287, 1535, 1330);
            c.vertex(1581, 1352);
            c.vertex(1616, 1319);
            c.bezierVertex(1635, 1301, 1650, 1283, 1650, 1279);
            c.bezierVertex(1650, 1259, 1470, 1180, 1423, 1180);
            c.bezierVertex(1407, 1180, 1385, 1165, 1357, 1134);
            c.bezierVertex(1334, 1108, 1301, 1081, 1283, 1074);
            c.bezierVertex(1210, 1043, 1119, 1071, 1073, 1139);
            c.bezierVertex(1059, 1160, 1028, 1183, 990, 1201);
            c.bezierVertex(924, 1232, 841, 1309, 820, 1359);
            c.bezierVertex(813, 1376, 804, 1390, 799, 1390);
            c.bezierVertex(784, 1390, 490, 1114, 490, 1100);
            c.bezierVertex(490, 1095, 542, 1074, 606, 1053);
            c.bezierVertex(670, 1032, 725, 1009, 727, 1003);
            c.bezierVertex(730, 996, 718, 950, 702, 900);
            c.bezierVertex(666, 794, 658, 801, 805, 825);
            c.bezierVertex(962, 851, 961, 851, 976, 767);
            c.bezierVertex(979, 747, 986, 728, 990, 725);
            c.bezierVertex(994, 722, 1024, 756, 1056, 799);
            c.bezierVertex(1089, 843, 1118, 879, 1121, 879);
            c.bezierVertex(1124, 880, 1162, 828, 1206, 764);
            c.bezierVertex(1249, 700, 1294, 636, 1305, 623);
            c.vertex(1326, 598);
            c.vertex(1355, 720);
            c.bezierVertex(1372, 792, 1390, 844, 1398, 848);
            c.bezierVertex(1409, 852, 1643, 783, 1758, 742);
            c.bezierVertex(1777, 735, 1773, 758, 1729, 889);
            c.bezierVertex(1704, 963, 1692, 1016, 1697, 1021);
            c.bezierVertex(1703, 1027, 1736, 1026, 1781, 1021);
            c.bezierVertex(1918, 1002, 2201, 978, 2207, 984);
            c.bezierVertex(2213, 989, 2198, 1008, 2085, 1135);
            c.bezierVertex(1984, 1247, 1928, 1319, 1934, 1329);
            c.bezierVertex(1937, 1333, 1965, 1345, 1997, 1355);
            c.bezierVertex(2029, 1365, 2059, 1376, 2064, 1380);
            c.bezierVertex(2077, 1392, 1904, 1490, 1872, 1489);
            c.bezierVertex(1857, 1488, 1829, 1483, 1808, 1477);
            c.endShape();
            c.beginShape();
            c.vertex(1645, 1110);
            c.bezierVertex(1648, 1104, 1645, 1098, 1638, 1095);
            c.bezierVertex(1631, 1093, 1547, 1061, 1453, 1025);
            c.bezierVertex(1358, 989, 1275, 960, 1269, 960);
            c.bezierVertex(1221, 960, 1465, 1082, 1558, 1105);
            c.bezierVertex(1630, 1122, 1637, 1122, 1645, 1110);
            c.endShape();
            c.beginShape();
            c.vertex(930, 1412);
            c.bezierVertex(929, 1364, 992, 1309, 1047, 1311);
            c.bezierVertex(1074, 1312, 1074, 1312, 1041, 1322);
            c.bezierVertex(992, 1336, 964, 1357, 946, 1393);
            c.bezierVertex(938, 1411, 930, 1419, 930, 1412);
            c.endShape();
            c.fill(0, 0, 0);
            c.beginShape();
            c.vertex(1085, 1940);
            c.bezierVertex(1064, 1917, 1072, 1890, 1100, 1890);
            c.bezierVertex(1135, 1890, 1166, 1863, 1168, 1829);
            c.bezierVertex(1171, 1791, 1155, 1770, 1124, 1770);
            c.bezierVertex(1090, 1770, 1085, 1752, 1111, 1724);
            c.bezierVertex(1139, 1694, 1148, 1694, 1160, 1724);
            c.bezierVertex(1172, 1756, 1191, 1766, 1202, 1747);
            c.bezierVertex(1214, 1724, 1240, 1700, 1251, 1700);
            c.bezierVertex(1257, 1700, 1271, 1711, 1284, 1725);
            c.bezierVertex(1301, 1743, 1309, 1747, 1318, 1738);
            c.bezierVertex(1325, 1731, 1330, 1720, 1330, 1713);
            c.bezierVertex(1330, 1695, 1365, 1697, 1380, 1715);
            c.bezierVertex(1396, 1734, 1386, 1760, 1362, 1760);
            c.bezierVertex(1332, 1760, 1323, 1780, 1328, 1833);
            c.bezierVertex(1332, 1877, 1335, 1881, 1362, 1887);
            c.bezierVertex(1399, 1894, 1408, 1915, 1385, 1940);
            c.bezierVertex(1360, 1967, 1348, 1965, 1328, 1930);
            c.bezierVertex(1312, 1902, 1308, 1901, 1266, 1906);
            c.bezierVertex(1236, 1910, 1215, 1908, 1206, 1901);
            c.bezierVertex(1186, 1885, 1152, 1903, 1140, 1936);
            c.bezierVertex(1129, 1965, 1109, 1967, 1085, 1940);
            c.endShape();
            c.beginShape();
            c.vertex(1300, 1840);
            c.bezierVertex(1300, 1835, 1292, 1830, 1283, 1830);
            c.bezierVertex(1268, 1830, 1267, 1832, 1280, 1840);
            c.bezierVertex(1299, 1852, 1300, 1852, 1300, 1840);
            c.endShape();
            c.beginShape();
            c.vertex(1558, 1105);
            c.bezierVertex(1465, 1082, 1221, 960, 1269, 960);
            c.bezierVertex(1275, 960, 1358, 989, 1453, 1025);
            c.bezierVertex(1547, 1061, 1631, 1093, 1638, 1095);
            c.bezierVertex(1654, 1101, 1644, 1120, 1627, 1119);
            c.bezierVertex(1620, 1119, 1589, 1112, 1558, 1105);
            c.endShape();
            c.popMatrix();

            return c;
        }
    },
    interior: {
        width: 40,
        height: 40,
        img: function(c) {

            c.background(0, 0, 0, 0);
            c.rectMode(CORNER);
            c.noStroke();
            c.fill(196, 65, 0);
            c.rect(0, 0, 40, 40);
            c.fill(0, 0, 0, 30);
            c.rect(0, 0, 40, 15);
            c.strokeWeight(2);
            c.strokeCap(SQUARE);
            c.stroke(0);
            c.line(0, 10, 40, 10);
            c.line(0, 25, 40, 25);
            c.line(15, 10, 15, 25);
            c.line(35, 10, 35, 25);
            c.line(25, 0, 25, 10);
            c.line(25, 25, 25, 40);
            c.line(0, 35, 40, 35);
            c.noStroke();
            c.fill(0, 0, 0, 110);
            c.rect(0, 0, 40, 40);
            return c;
        }
    },
    factory: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.rectMode(CORNER);
            c.noStroke();
            c.fill(196, 65, 0);
            c.rect(0, 0, 40, 40);
            c.fill(0, 0, 0, 30);
            c.rect(0, 0, 40, 15);
            c.strokeWeight(2);
            c.strokeCap(SQUARE);
            c.stroke(0);
            c.line(0, 10, 40, 10);
            c.line(0, 25, 40, 25);
            c.line(15, 10, 15, 25);
            c.line(35, 10, 35, 25);
            c.line(25, 0, 25, 10);
            c.line(25, 25, 25, 35);
            c.line(0, 35, 40, 35);



            return c;
        }
    },
    forest: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.rectMode(CORNER);
            c.noStroke();
            c.fill(156, 133, 0);

            c.rect(0, 0, 40, 40);

            c.fill(0, 0, 0, 30);
            c.rect(0, 0, 40, 20);

            return c;
        }
    },
    acid: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.rectMode(CORNER);
            c.noStroke();
            c.fill(33, 199 + sin(frameCount * 5) * 9, 0);

            c.rect(0, 0, 40, 40);

            c.fill(0, 0, 0, 30);
            c.rect(0, 25, 40, 15);

            c.stroke(25, 150, 0);
            c.strokeWeight(2);
            c.noFill();
            c.arc(10, 10, 10, 10, 0 - 3, 0);
            c.arc(30, 20, 7, 7, 0 - 3, 0);
            c.arc(15, 35, 7, 7, 0 - 3, 0);


            return c;
        }
    },
    exit: {
        width: 40,
        height: 40,
        img: function(c) {

            c.background(0, 0, 0, 0);
            c.noStroke();
            c.strokeWeight(7);
            c.stroke(50);
            c.strokeCap(SQUARE);
            c.line(0 + 5, 0, 0 + 5, 0 + 39);
            c.noStroke();
            c.fill(50, 199, 0);
            c.triangle(0 + 9, 0, 0 + 9, 0 + 30, 0 + 38, 0 + 15);
            c.fill(0, 0, 0, 50);
            c.triangle(0 + 9, 0 + 30, 0 + 38, 0 + 15, 0 + 9, 0 + 15);

            return c;
        }
    },
    door: {
        width: 40,
        height: 40,
        img: function(c) {
            c.rectMode(CORNER);
            c.noStroke();
            c.fill(161, 81, 0);
            c.rect(0, 0, 40, 40);
            c.stroke(161, 113, 0);
            c.strokeCap(SQUARE);
            c.fill(255, 0, 0);
            c.noStroke();
            c.fill(255, 255, 255, 100);
            c.rect(5, 5, 10, 20);
            c.rect(25, 5, 10, 20);
            c.rect(5, 5, 10, 20);
            c.rect(25, 5, 10, 20);
            c.fill(30);
            c.ellipse(9, 31, 10, 5);
            c.fill(0, 0, 0, 50);
            c.noStroke();
            c.triangle(0, 0, 0, 40, 40, 40);



            return c;
        }

    },
    furnaceSide: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.noStroke();
            c.fill(150, 150, 150);
            c.rect(0, 0, 40, 40);

            c.fill(200);
            c.rect(0, 25, 40, 15);
            c.fill(220);
            c.rect(0, 25, 35, 10);
            c.fill(0, 0, 0, 50);
            c.triangle(0, 0, 0, 40, 40, 40);

            return c;

        }
    },
    furnace: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.noStroke();
            c.fill(150, 150, 150);
            c.rect(0, 0, 40, 40);

            c.fill(200);
            c.rect(0, 25, 40, 15);
            c.fill(220);
            c.rect(5, 25, 30, 10);

            c.fill(50, 50, 50);
            c.arc(20, 40, 25, 25, -180, 0);
            c.fill(255, 111, 0);
            c.arc(20, 40, 15, 15, -180, 0);
            c.fill(255, 0, 0);
            c.arc(20, 40, 10, 10, -180, 0);
            c.fill(0);
            c.rect(5, 15, 30, 6, 5);
            c.fill(0, 0, 0, 50);
            c.triangle(0, 0, 0, 40, 40, 40);
            return c;

        }
    },
    player: {
        width: 30,
        height: 30,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.noStroke();
            rectMode(CORNER);
            c.fill(0, 179, 255);
            c.noStroke();
            c.rect(0, 0, 30, 30, 3);
            c.fill(0);
            c.ellipse(7, 18, 7, 7);
            c.ellipse(23, 18, 7, 7);
            c.fill(255);
            c.ellipse(8, 17, 4, 4);
            c.ellipse(24, 17, 4, 4);
            c.noFill();
            c.strokeWeight(2);
            c.stroke(0);
            c.arc(15, 26, 13, -5, 0, 3);



            return c;
        }
    }
};
var Cache = {
    Bitmap: {

    },
    Sound: {}
};
var Loading = {
    draw: function() {
        var y = 1 - pow(1 - x, 2);
        y = map(y, 0, 1, (cacheImageNo - 1) / Object.keys(PreCache).length, cacheImageNo / Object.keys(PreCache).length);
        background(y * 75, y * 25, 0);
        if (frameCount % 8 === 0) {
            x = 0.1;
            var counter = 0;
            for (var i in PreCache) {
                if (counter === cacheImageNo) {
                    Cache.Bitmap[i] = cacheImage(PreCache[i].img, PreCache[i].width, PreCache[i].height);
                    cacheImageNo++;
                    break;
                }
                counter++;
            }
        }

        // Loading Screen
        noFill();
        stroke(255, 255, 255);
        strokeWeight(20);
        arc(width/2,height-320,width-20,height-2,0+sin(frameCount*y/2)*7,180+sin(frameCount*y/2)*7);

        // Text
        colorMode(HSB);
        textAlign(CENTER, CENTER);
        textSize(35);
        textFont(createFont("Trebuchet MS Bold"));
        fill(110 + sin(frameCount * 3) * 100, 255, 255);
        if (frameCount % 50 === 0) {
            textSelection = round(random(0, 9));
        }
        switch (textSelection) {
            case 0:
                text("Rapping...", width / 2, height / 2);
                break;
            case 1:
                text("Melting....", width / 2, height / 2);
                break;
            case 2:
                text("Dripping Acid...", width / 2, height / 2);
                break;
            case 3:
                text("Getting Annoyed...", width / 2, height / 2);
                break;
            case 4:
                text("Spamming Restart Button...", width / 2, height / 2);
                break;
            case 5:
                text("Checking Fume Levels...", width / 2, height / 2);
                break;
            case 6:
                text("Shooting Lasers...", width / 2, height / 2);
                break;
            case 7:
                text("Spewing Smoke...", width / 2, height / 2);
                break;
            case 8:
                text("Getting Sad...", width / 2, height / 2);
                break;
            case 9:
                text("Hunting Enemies..", width / 2, height / 2);
                break;
        }

        colorMode(RGB);

        var counter2 = 0;
        for (var i in Cache.Bitmap) {
            if (counter2 === cacheImageNo - 1) {
                image(Cache.Bitmap[i], width - 10, height - 10, 10, 10);
                if (counter2 === Object.keys(PreCache).length - 1 && x >= 0.75) {
                    scene = "menu";
                }
                break;
            }
            counter2++;
        }
        if (x < 1) {
            x += 0.1;
        }
    }
};

var minScreenx;
//Smoke stuff (by πceratops)
var smoke = [];
var smokeMachine = {
    releaseTimer: 0
};
var makeSmoke = function(x, y) {
    //println(smoke.length);
    for (var i = 0; i < smoke.length; i++) {
        fill(i, i, i, smoke[i].o); //smoke.io! :P

        ellipse(smoke[i].x, smoke[i].y, random(15, 20), random(15, 20));
        smoke[i].v.normalize();
        smoke[i].x += smoke[i].v.x*2;
        smoke[i].y += smoke[i].v.y * 2;
        smoke[i].o -= 2;
        if (smoke[i].o <= 0) {
            smoke.splice(i, 1);
        }
    }
    smokeMachine.releaseTimer += 1;
    if (smokeMachine.releaseTimer % 1 === 0) {
        smoke.push({
            x: 300 + x,
            y: 300 + y,
            o: 255,
            v: new PVector(random(0, 55), random(6.9, -33))
        });
    }
};

var f = function(x, y, font, size, words, c) {
    textFont(createFont(font));
    textSize(size);
    textAlign(CENTER);
    fill(0, 0, 0, 50);
    text(words, x, y + 5);
    fill(c);
    text(words, x, y);
}; //my special font ^_^
var cloud = function(x, y, sz) {
    noStroke();
    pushMatrix();
    translate(x, y);
    scale(sz / 10);
    rectMode(CENTER);
    fill(100);
    rect(0, 0, 100, 20, 30);
    ellipse(-25, -13, 30, 23);
    ellipse(25, -13, 40, 33);
    ellipse(0, -19, 50, 50);
    fill(80);
    (rect)(-25, 0, 50, 20, 30, 0, 0, 30);
    arc(0, -19, 50, 50, -270, -90);
    ellipse(-25, -13, 30, 23);
    rectMode(CORNER);
    popMatrix();
};
var tree = function(x, y, num, f) {

    if (num === 1) {
        noStroke();
        fill(f);
        ellipse(x, y, 50, 50);
        fill(0, 0, 0, 50);
        arc(x, y, 50, 50, 270, 450);
        stroke(69);
        strokeWeight(7);
        strokeCap(SQUARE);
        line(x, y + 25, x, y + 65);
    }
    if (num === 2) {
        noStroke();
        fill(f);
        rectMode(CORNER);
        rect(x - 15, y - 45, 30, 90, 8);
        fill(0, 0, 0, 50);
        (rect)(x, y - 45, 15, 90, 0, 20, 20, 0);
        stroke(69);
        strokeWeight(7);
        strokeCap(SQUARE);
        line(x, y + 45, x, y + 65);
    }
    if (num === 3) {
        noStroke();
        fill(f);
        triangle(x - 20, y + 50, x + 20, y + 50, x, y - 50);
        fill(0, 0, 0, 50);
        triangle(x, y + 50, x + 20, y + 50, x, y - 50);
        stroke(69);
        strokeWeight(7);
        strokeCap(SQUARE);
        line(x, y + 50, x, y + 65);
    }
    if (num === 4) {
        noStroke();
        fill(f);
        ellipse(x, y, 70, 50);
        fill(0, 0, 0, 50);
        arc(x, y, 70, 50, 270, 450);
        stroke(69);
        strokeWeight(7);
        strokeCap(SQUARE);
        line(x, y + 25, x, y + 65);
    }
    if (num === 5) {
        stroke(69);
        strokeWeight(7);
        strokeCap(SQUARE);
        line(x, y + 25, x, y + 65);
        strokeWeight(4);
        line(x, y + 44, x - 34, y + 10);
        line(x, y + 37, x + 36, y + 9);
        noStroke();
        fill(f);
        ellipse(x, y, 50, 50);
        fill(0, 0, 0, 50);
        arc(x, y, 50, 50, 270, 450);
        fill(f);
        ellipse(x - 25, y + 10, 30, 30);
        fill(0, 0, 0, 50);
        arc(x - 25, y + 10, 30, 30, 270, 450);
        fill(f);
        ellipse(x + 25, y + 10, 30, 30);
        fill(0, 0, 0, 50);
        arc(x + 25, y + 10, 30, 30, 270, 450);

    }
};


var factoryBg = function() {
    {
        pushMatrix();
        translate(-13, 69);
        rectMode(CENTER);

        noStroke();
        fill(0, 0, 0);
        rect(231, 435, 332, 123, 5);
        rect(301, 359, 61, 150, 10);
        makeSmoke(0, -10);
        popMatrix();
    } //the background  
}; //factory and forest backgrounds
var forestBg = function() {

    cloud(167, 100, 20);
    cloud(300, 200, 13);
    cloud(500, 130, 10);
    for (var i = 600; i < 0; i--) {
        noStroke();
        line(0, i, 600, i);
    }
    rectMode(CENTER);
    tree(42, 363, 2, color(181, 157, 0));
    pushMatrix();
    rotate(-10);
    tree(139, 433, 3, color(181, 157, 0));
    rotate(15);
    tree(507, 342, 5, color(181, 157, 0));


    popMatrix();



    noStroke();

    fill(69, 42, 1);
    triangle(0, 600, 0, 400, 300, 600);
    fill(64, 36, 1);
    triangle(383, 666, 126, 485, 406, 420);
    fill(48, 31, 3);
    triangle(900, 600, 388, 600, 406, 421);


};

var insideBg = function() {
    for (var i = 0; i < width; i += 40) {
        for (var j = 0; j < height; j += 40) {
            image(Cache.Bitmap.interior, i, j);
        }
    }
};

var button = function(x, y, sz, txt, nxt) {
    noStroke();
    fill(0, 0, 0, 100);
    ellipse(x, y + 10, sz, sz);
    stroke(255, 255, 255, 150);
    strokeWeight(5);
    fill(200, 0, 0, 50);
    if (dist(x, y, mouseX, mouseY) < sz / 2) {
        mouse.overButton = true;
        y += 5;
        fill(255, 0, 0, 70);
        if (mouse.clicked) {
            scene = nxt;
        }
    }
    ellipse(x, y, sz, sz);
    fill(255, 255, 255);
    textFont(createFont("Trebuchet MS Bold"));
    textAlign(CENTER, CENTER);
    textSize(sz / 4);
    text(txt, x, y);



};

var keyPressed = function() {
    keys[keyCode] = true;
};
var keyReleased = function() {
    keys[keyCode] = false;
};


var Camera = function(x, y, w, h, viewX, viewY, levelWidth, levelHeight, speed) {
    // Viewport on canvas
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;

    // Inside the viewport
    this.viewX = viewX;
    this.viewY = viewY;
    this.levelWidth = levelWidth;
    this.levelHeight = levelHeight;

    this.speed = this.speed || speed; // the lower the number, the faster the speed
}; // made by thomas l
Camera.prototype.follow = function(ent) {
    var x = -ent.x + this.x + (this.w / 2) - (ent.w / 2);
    var y = -ent.y + this.y + (this.h / 2) - (ent.h / 2);
    var a = atan2(y - this.viewY, x - this.viewX);
    var v = dist(x, y, this.viewX, this.viewY) / this.speed;

    this.viewX += v * cos(a);
    this.viewY += v * sin(a);

    var width = this.x + this.w - this.levelWidth;
    var height = this.y + this.h - this.levelHeight;

    this.viewX = min(this.viewX, this.x);
    this.viewX = max(this.viewX, width);
    this.viewY = min(this.viewY, this.y);
    this.viewY = max(this.viewY, height);
};
Camera.prototype.view = function(ent) {
    var viewX = -this.viewX + this.x,
        viewY = -this.viewY + this.y,
        viewW = ent.w - this.w,
        viewH = ent.w - this.h;

    if (ent.x > viewX - ent.w &&
        ent.x < viewX - viewW + ent.w &&
        ent.y > viewY - ent.h &&
        ent.y < viewY - viewH + ent.h) {
        var camView = {
            x: (this.viewX + ent.x),
            y: (this.viewY + ent.y),
            w: ent.w,
            h: ent.h,
            cam: this
        };

        return camView;
    }
};


var Block = function(x, y, type) {
    this.x = x;
    this.y = y;
    this.w = 40;
    this.h = 40;
    this.ignoreOnCollision = type === 'interior';
    this.type = type;
}; // kinds of blocks
Block.prototype.draw = function() {
    switch (this.type) {
        case "interior":
            image(Cache.Bitmap.interior, this.x, this.y);
            break;
        case "factory":
            image(Cache.Bitmap.factory, this.x, this.y);
            break;
        case "forest":
            image(Cache.Bitmap.forest, this.x, this.y);
            break;
        case "acid":
            image(Cache.Bitmap.acid, this.x, this.y);
            break;
        case "exit":
            image(Cache.Bitmap.exit, this.x, this.y);
            break;
        case "door":
            image(Cache.Bitmap.door, this.x, this.y);
            break;
        case "Furnace side":
            image(Cache.Bitmap.furnaceSide, this.x, this.y);
            break;
        case "Furnace":
            image(Cache.Bitmap.furnace, this.x, this.y);

            break;
    }

}; //draws all those blocks 


var levels = [

    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
        [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2],
        [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
    ],

    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    ],

    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 9, 9, 9, 9, 1, 3, 1, 3, 1, 3, 1, 3, 1, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5],
        [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 3, 1, 1, 1, 3, 3, 3, 3, 1, 1, 9, 9, 9, 9, 1, 1, 1, 9, 9, 9, 1, 1, 9]
    ],



    [
        [9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1],
        [9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [1, 1, 1, 9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 1, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 1, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 1, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 1, 3, 1, 9, 9, 1, 1, 1, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 1, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 1, 9, 9, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 1, 9, 9, 9, 9, 9, 1, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5],
        [1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 3, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 9, 9, 9, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1]
    ],

    [
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9, 9, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 1, 1, 1, 1, 9, 9, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 3, 3, 1, 9, 9, 1, 1, 1, 5, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ],


    [
        [9, 9, 9, 9, 3, 9, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 3, 9, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [1, 1, 9, 9, 3, 1, 3, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 3, 9, 9, 3, 1, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 3, 9, 9, 3, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [3, 3, 9, 3, 3, 3, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 1, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [3, 3, 3, 3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 9, 1, 3, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 1, 1, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 9, 1, 3, 1, 9, 9, 9, 1, 1, 1, 1, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 9],
        [9, 9, 9, 9, 9, 9, 9, 1, 3, 1, 3, 1, 3, 1, 9, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 1, 9, 1, 9, 1, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 3],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 3, 3, 1, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 9, 9, 9, 9, 9]
    ],


    [
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9],
        [9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9],
        [9, 9, 9, 3, 9, 9, 9, 9, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 9, 9, 1, 3, 9, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 3, 9, 9, 9, 9, 1, 3, 1, 9, 9, 9, 9, 9, 1, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 1, 1, 1, 3, 3, 3, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 9, 1, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
    ],


    [
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5],
        [1, 9, 9, 9, 9, 9, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1],
        [1, 3, 3, 3, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 9],
        [9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 1, 3, 3, 3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 3, 1, 1, 3, 3, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 9, 9, 9, 9]
    ],

            [
        [9, 9, 9, 3, 3, 3, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 3, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 3, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 3, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 3, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 3, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 3, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 3, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 3, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9, 9, 3, 3, 9, 9, 3, 3, 9, 9, 9, 9, 9, 3, 9, 9, 3, 9, 9, 9, 9, 9, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 3, 9, 9, 3, 3, 9, 9, 9, 9, 9, 9, 9, 5],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 3, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 9, 9, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 9, 9, 6, 9, 9, 9, 6, 6, 6, 6, 9, 9, 6, 9, 9, 9, 9, 9, 9, 6, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1],
        [3, 3, 3, 3, 1, 1, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 1, 3, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 9, 9, 9, 9, 6, 6, 6, 6, 6, 9, 9, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 6, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1]
    ],



    [
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 6, 9, 6, 9, 9, 6, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 6, 6, 9, 9, 6, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 9, 9, 6, 6, 6, 6, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 7, 6, 7, 6, 6, 6, 9, 1, 9, 9, 9, 9, 9, 6, 6, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 6, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 3, 7, 9, 9, 6, 6, 1, 9, 9, 9, 9, 9, 9, 6, 9, 6, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 7, 7, 7, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 6, 9, 6, 9, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 6, 6, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 6, 9, 9, 6, 9, 9, 6, 6, 6, 6, 1, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 6, 6, 9, 9, 9, 6, 9, 1, 9, 9, 9, 9, 9, 9, 6, 9, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 6, 1, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 6, 9, 9, 1, 3, 3, 6, 3, 3, 3, 3, 3, 1, 9, 9, 9, 9, 9, 9, 9, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 1, 1, 1, 9, 9, 1, 9, 9, 1, 9, 9, 1, 9, 9, 1, 9, 9, 1, 9, 9, 1, 9, 1, 9, 9, 9, 9, 9, 6, 6, 9, 9, 6, 9, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 3, 6, 9, 6, 6, 9, 9, 9, 9, 6, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 6, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 9, 9, 9, 9, 6, 6, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
    ],

    [
        [9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 6, 9, 9, 6, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 7, 6, 7, 9, 6, 6, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 7, 3, 7, 6, 9, 6, 6, 6, 9, 9],
        [9, 9, 9, 9, 9, 9, 7, 7, 7, 9, 9, 9, 9, 6, 6, 6],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 3, 3, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [3, 3, 3, 1, 1, 3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9],
        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 9],
        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    ],




];

var drawStage = function() {
    minScreenx = (levels[currentLevel][0].length - 15) * -40;
    for (var p = 0; p < levels[currentLevel].length; p++) {
        for (var a = 0; a < levels[currentLevel][p].length; a++) {
            switch (levels[currentLevel][p][a]) {
                case 9:
                    blocks.push(new Block(a * 40, p * 40, 'interior'));
                    break;
                case 1:
                    blocks.push(new Block(a * 40, p * 40, 'factory'));
                    break;
                case 2:
                    blocks.push(new Block(a * 40, p * 40, 'forest'));
                    break;
                case 3:
                    blocks.push(new Block(a * 40, p * 40, 'acid'));
                    break;
                case 4:
                    blocks.push(new Block(a * 40, p * 40, 'exit'));
                    break;
                case 5:
                    blocks.push(new Block(a * 40, p * 40, 'door'));
                    break;
                case 6:
                    blocks.push(new Block(a * 40, p * 40, 'Furnace side'));
                    break;
                case 7:
                    blocks.push(new Block(a * 40, p * 40, 'Furnace'));
                    break;

            }
        }

    }
};
drawStage();
var Player = function() {

    this.x = 160;
    this.y = 485;
    this.w = 30;
    this.h = 30;
    this.xvel = 0;
    this.yvel = 0;
    this.falling = true;

    this.gravity = 0.375;
    this.jumpHeight = 9;
    this.maxFallSpeed = 12;

    this.moveSpeed = 0.5;
    this.maxMoveSpeed = 5;
    this.facingDirection = "r";
    this.ignoreOnCollision = Block.type === 9;

    this.update = function(platforms) {
        if (!isFading) {
            if (keys[LEFT]) {
                this.facingDirection = "l";
                this.xvel -= this.moveSpeed;
            }
            if (keys[RIGHT]) {
                this.facingDirection = "r";
                this.xvel += this.moveSpeed;
            }
        }
        if (this.y + this.h > 600) {
            isFading = true;

            this.x = 160;
            this.y = 485;
            screenx = 0;
            screeny = 0;


        }



        if (this.x < 0) {
            this.x = 0;
        }
        if (this.x > 560 - screenx) {
            this.x = 560 - screenx;
        }

        if (!isFading) {

            if (!keys[LEFT] && !keys[RIGHT]) {

                if (this.xvel > 0) {

                    this.xvel -= this.moveSpeed;
                }

                if (this.xvel < 0) {

                    this.xvel += this.moveSpeed;
                }

                if (this.xvel < 0.5 && this.xvel > 0) {

                    this.xvel = 0;
                }

                if (this.xvel > -0.5 && this.xvel < 0 && this.x > 20 && this.x < 580) {

                    this.xvel = 0;
                }
            }

            if (keys[UP] && !this.falling) {

                this.yvel = -this.jumpHeight;
            }

            this.yvel += this.gravity;

            if (this.yvel > this.maxFallSpeed) {

                this.yvel = this.maxFallSpeed;
            }

            if (this.xvel > this.maxMoveSpeed) {

                this.xvel = this.maxMoveSpeed;
            }

            if (this.xvel < -this.maxMoveSpeed) {

                this.xvel = -this.maxMoveSpeed;
            }
        }
        if (!isFading) {
            this.x += this.xvel;
        }
        this.collideWith(this.xvel, 0, blocks);

        this.falling = true;
        if (!isFading) {
            this.y += this.yvel;
        }

        this.collideWith(0, this.yvel, blocks);



    };

    this.collideWith = function(xv, yv, platforms) {


        for (var i = 0; i < blocks.length; i++) {
            var p = blocks[i];

            if (this.y + this.h > p.y && this.y < p.y + p.h && this.x + this.w > p.x && this.x < p.x + p.w && p.type !== 'interior') {
                if (p.ignoreOnCollision) {


                } else {
                    if (yv > 0) {
                        this.yvel = 0;
                        this.falling = false;
                        this.y = p.y - this.h;

                        if (blocks[i].type === 'acid') {

                            isFading = true;



                            this.x = 160;
                            this.y = 485;
                            screenx = 0;
                            screeny = 0;



                        }
                        if (blocks[i].type === 'exit' || blocks[i].type === 'door') {
                            isFading = true;

                            blocks = [];
                            currentLevel++;
                            drawStage();

                            this.x = 160;
                            this.y = 485;
                            screenx = 0;
                            screeny = 0;




                            return;
                        }
                    }

                    if (yv < 0) {
                        this.yvel = 0;
                        this.falling = true;
                        this.y = p.y + p.h;


                        if (blocks[i].type === 'acid') {

                            isFading = true;



                            isFading = false;
                            this.x = 160;
                            this.y = 485;
                            screenx = 0;
                            screeny = 0;




                        }
                        if (blocks[i].type === 'exit' || blocks[i].type === 'door') {
                            isFading = true;

                            blocks = [];
                            currentLevel++;
                            drawStage();

                            this.x = 160;
                            this.y = 485;
                            screenx = 0;
                            screeny = 0;


                            return;
                        }
                    }

                    if (xv > 0) {
                        this.xvel = 0;
                        this.x = p.x - this.w;


                        if (blocks[i].type === 'acid') {

                            isFading = true;



                            this.x = 160;
                            this.y = 485;
                            screenx = 0;
                            screeny = 0;



                        }
                        if (blocks[i].type === 'exit' || blocks[i].type === 'door') {
                            isFading = true;

                            blocks = [];
                            currentLevel++;
                            drawStage();


                            this.x = 160;
                            this.y = 485;
                            screenx = 0;
                            screeny = 0;




                            return;
                        }
                    }

                    if (xv < 0) {
                        this.xvel = 0;
                        this.x = p.x + p.w;


                        if (blocks[i].type === 'acid') {

                            isFading = true;



                            this.x = 160;
                            this.y = 485;
                            screenx = 0;
                            screeny = 0;



                        }
                        if (blocks[i].type === 'exit' || blocks[i].type === 'door') {
                            isFading = true;

                            blocks = [];
                            currentLevel++;
                            drawStage();


                            this.x = 160;
                            this.y = 485;
                            screenx = 0;
                            screeny = 0;



                            return;
                        }

                    }
                }
            }
        }

    };

    this.draw = function() {
        pushMatrix();
        translate(this.x, this.y);
        if (this.facingDirection === "l") {
            scale(-1, 1);
            translate(-this.w, 0);
        }
        image(Cache.Bitmap.player, 0, 0);
        popMatrix();
    };

}; //complicated player physics


var p = new Player();


var c = new Camera();



var menu = function() {
    image(Cache.Bitmap.bg, 0, 0);
    factoryBg();
    forestBg();
    button(300, 500, 100, "Begin", "game");
    button(200, 500, 70, "How", "how to");
    button(400, 500, 70, "Credits", "credits");

    image(Cache.Bitmap.pirate, 520, 530);
    f(300, 250, "Trebuchet MS Bold", 100, "The Factory", color(100, 0, 0));

};




var how = function() {
    noStroke();
    image(Cache.Bitmap.bg, 0, 0);

    textFont(createFont("Trebuchet MS Bold"));
    textSize(30);
    textAlign(CENTER, CENTER);
    fill(255, 255, 255);
    text("Use the arrow keys to move.\n Survive.\nThis game is the hardest\nof them all.\nJump with caution.", 300, 200);



    button(550, 550, 50, "Back", "menu");



};



var credits = function() {
    noStroke();
    image(Cache.Bitmap.bg, 0, 0);
    textFont(createFont("Trebuchet MS Bold"));
    textSize(25);
    textAlign(CENTER, CENTER);
    fill(255, 255, 255);
    text("Thanks to KCF for helping reduce lag\n Thanks Blue Leaf for fixing the respawn\n and the camera function,\nThese buttons were based off of \none of mine that Chester edited\nthat I edited back.\nThose clouds were also by Chester.\nThe smoke was drawn by Piceratops\nfor a game we never finished.\n Copyright 2016 Cαptαιn™ Productions.", 300, 300);
    fill(0, 0, 0, 50);
    noStroke();

    button(550, 550, 50, "Back", "menu");


};

draw = function() {
    if (scene === "loading") {
        Loading.draw();
    }
    if (scene === "menu") {
        menu();
    }
    if (scene === "game") {
        if (currentLevel < 4) {
            image(Cache.Bitmap.bg, 0, 0);
            forestBg();
        } else {
            insideBg();
        }


        pushMatrix();

        screenx = constrain(screenx, minScreenx, 0);
        translate(screenx, screeny);



        for (var i = 0; i < blocks.length; i++) {
            blocks[i].draw();
        }
        if (currentLevel < 10) {
            p.draw(); //draws player
        }

        p.update(blocks); //collision updater

        if (currentLevel === 0) {
            f(300, 400, "Trebuchet MS Bold", 25, "I can't believe I'm doing this.", color(255));
            f(1610, 300, "Trebuchet MS Bold", 25, "I must be really ignorant of the danger there.", color(255));
            f(3690, 400, "Trebuchet MS Bold", 25, "What am I thinking?", color(255));
        }
        if (currentLevel === 1) {
            f(600, 300, "Trebuchet MS Bold", 25, "I have to do this, though.", color(255));
            f(3220, 150, "Trebuchet MS Bold", 25, "I need to avenge the Forest.", color(255));
        }
        if (currentLevel === 2) {
            f(400, 400, "Trebuchet MS Bold", 25, "I'm almost there...", color(255));
            f(1185, 400, "Trebuchet MS Bold", 25, "I made it!", color(255));
            f(2680, 350, "Trebuchet MS Bold", 25, "I have to make my way to the factory's generator.", color(255));
        }
        if (currentLevel === 3) {
            f(300, 100, "Trebuchet MS Bold", 25, "I'm going to die today.", color(255));
            f(1780, 400, "Trebuchet MS Bold", 25, "Aha, here's the entry to Sector 1", color(255));

        }
        if (currentLevel === 4) {
            f(300, 300, "Trebuchet MS Bold", 25, "I have to get through 3 small\n sectors to reach the  engine.", color(255));

        }
        if (currentLevel === 5) {
            f(300, 500, "Trebuchet Ms Bold", 25, "Almost out of Sector 1.", color(255));

        }
        if (currentLevel === 6) {
            f(600, 300, "Trebuchet MS Bold", 25, "Those acidfalls are getting more common...", color(255));
            f(2620, 400, "Trebuchet MS Bold", 25, "That was a huge acid lake. It's \nprobably one of the ones that powers the engine.", color(255));
        }
        if (currentLevel === 7) {
            f(400, 400, "Trebuchet Ms Bold", 25, "Sector 3, almost there.", color(255));

        }
        if (currentLevel === 8) {

            f(2260, 200, "Trebuchet MS Bold", 25, "Those pipes suck acid into the engine to power it.", color(255));
            f(3335, 250, "Trebuchet MS Bold", 25, "If I destroy the engine, acid will flood the factory, and destroy it.", color(255));
        }
        if (currentLevel === 9) {
            f(500, 400, "Trebuchet MS Bold", 25, "I'm in the engine room,\nnow to get through this labrynth of pipes..", color(255));
            f(1890, 300, "Trebuchet MS Bold", 25, "There it is. If I can reach that door\nit's game over for the Factory.", color(255));
        }
        if (currentLevel === 10) {
            pushMatrix();
            translate(0, acidY);
            rectMode(CORNER);
            noStroke();
            fill(33, 199 + sin(frameCount * 5) * 9, 0);

            rect(0, 0, 600, 600);

            fill(0, 0, 0, 30);
            rect(0, 0, 600, 200);

            stroke(25, 150, 0);
            strokeWeight(20);
            noFill();
            arc(95, 119, 100, 100, -180, 0);
            arc(411, 294, 200, 200, -180, 0);
            arc(110, 499, 150, 150, -180, 0);
            popMatrix();
            acidY -= 2;
            if (acidY <= 0) {
                acidY = 0;
                isFading = true;

            }



        }

        popMatrix();
        if (isFading === false) {
            if (p.x + screenx > 400 || p.x + screenx < 300) {
                screenx -= p.xvel;
            }
        }




        noStroke();
        fill(0, 0, 0, fade);
        rect(0, 0, width, height);
        //println("isFading: " + isFading + "; fade: " + fade);
        if (fade < 0) {
            fade = 0;
        }

        if (isFading) {
            fade += 10;
            //println("here we go");
        }
        if (fade > 285) {
            isFading = false;
        }
        if (isFading === false) {
            fade -= 7;
            if (acidY === 0) {
                scene = "the end";


            }

            //println("Fade out");
        }

    }

    if (scene === "how to") {
        how();
    }
    if (scene === "credits") {
        credits();
    }
    if (scene === "the end") {
        image(Cache.Bitmap.bg, 0, 0);
        factoryBg();
        forestBg();
        fill(255);
        f(300, 100, "Trebuchet MS Bold", 20, "Thank you for playing The Factory,\nand all of the Acid Trilogy games.\nI really enjoyed making this series of platformers,\nand I hope you enjoyed playing them.\nI'd like to give special thanks to Joel Holveck,\n who helped me through a glitch that I was struggling\n with without getting irritated with me at all,\n and teaching me some debugging tips along the way!\n Thanks, Joel.\n Another shoutout to FireAnt Studios,\n who's platformer inspired me to create this series.\n Thank you all for supporting me all\n along the way in the creation of this series!\nCiao,\n     Captain", color(255));

    }

    cursor(mouse.overButton ? 'pointer' : 'default');
    mouse.clicked = false;
    mouse.overButton = false;


};

mouseClicked = function() {
    mouse.clicked = true;
};
//That's a lot.
