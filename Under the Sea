var keys = [];
var blocks = [];
var currentLevel = 0;
var scene = "loading";
var numOfGems = 0;
var numOfCoins = 0; 
var screenx = 0;
var screeny = 0;
var cacheImageNo = 0;
var x = 0.1;
var textSelection = 0;
var fade = 300;
noStroke();
{
var darkbrown = function() {fill(122, 66, 44);};
var dbrowns = function() {stroke(102, 49, 28);};
var lightbrown = function() {fill(133, 80, 45);};
var lbrowns = function() {stroke(133, 80, 45);};
var black = function() {fill(0, 0, 0);};
var blacks = function() {stroke(0, 0, 0);};
var transblue = function() {fill(204, 255, 255, 100);};
var tblues = function() {stroke(204, 255, 255, 100);};
var sand = function() {fill(179, 136, 50);};
var shadow = function() {fill(0, 0, 0, 25);};
var shadow2 = function() {fill(0, 0, 0, 50);};
var darkdarkbrown = function() {fill(74, 40, 25);};
var darkdarkdarkbrown = function() {fill(66, 35, 18);};
}
var cacheImage = function(imgFunction, w, h) {
    var c = createGraphics(w, h, JAVA2D);
    if(!c) {
        return;
    }
    
    c = imgFunction(c);
    
    return(c.get());
};

/** --- RENDERING & INPUT --- **/
var PreCache = {
    bg: {
        width: width,
        height: height,
        img: function(c) {
            c.background(255);
            c.strokeWeight(11);
            for(var i = 0; i < height; i += 10){
                c.stroke(lerpColor(color(0, 136, 255), color(51, 0, 255), i/height));
                c.line(0, i, width, i);
            }
            
            for (var Size=79; Size<600; Size+=10){
                c.fill(0,0,0,10);
                c.noStroke();
                c.rect(0,799,width,-Size);
            }
           
            
            return c;
        },
    },
    pirate: {
        width: 60,
        height: 50,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.pushMatrix();
            c.translate(70, 70);
            c.scale(0.03);
            c.angleMode = "degrees";
            c.rotate(180);
            c.noStroke();
            c.fill(255);
            c.beginShape();
            c.vertex(1255, 2123);
            c.bezierVertex(1164, 2113, 1065, 2053, 1030, 1985);
            c.bezierVertex(984, 1896, 865, 1815, 692, 1754);
            c.bezierVertex(663, 1744, 641, 1731, 643, 1725);
            c.bezierVertex(648, 1710, 864, 1616, 999, 1570);
            c.bezierVertex(1194, 1504, 1305, 1486, 1525, 1485);
            c.bezierVertex(1734, 1485, 1800, 1495, 1960, 1554);
            c.vertex(2045, 1585);
            c.vertex(1963, 1591);
            c.bezierVertex(1904, 1595, 1866, 1605, 1826, 1624);
            c.bezierVertex(1764, 1655, 1686, 1734, 1654, 1801);
            c.bezierVertex(1642, 1825, 1620, 1870, 1605, 1901);
            c.bezierVertex(1534, 2049, 1394, 2137, 1255, 2123);
            c.endShape();
            c.beginShape();
            c.vertex(1140, 1936);
            c.bezierVertex(1152, 1903, 1186, 1885, 1206, 1901);
            c.bezierVertex(1215, 1908, 1236, 1910, 1266, 1906);
            c.bezierVertex(1308, 1901, 1312, 1902, 1328, 1930);
            c.bezierVertex(1348, 1965, 1360, 1967, 1385, 1940);
            c.bezierVertex(1408, 1915, 1399, 1894, 1362, 1887);
            c.bezierVertex(1335, 1881, 1332, 1877, 1328, 1833);
            c.bezierVertex(1323, 1780, 1332, 1760, 1362, 1760);
            c.bezierVertex(1386, 1760, 1396, 1734, 1380, 1715);
            c.bezierVertex(1365, 1697, 1330, 1695, 1330, 1713);
            c.bezierVertex(1330, 1720, 1325, 1731, 1318, 1738);
            c.bezierVertex(1309, 1747, 1301, 1743, 1284, 1725);
            c.bezierVertex(1271, 1711, 1257, 1700, 1251, 1700);
            c.bezierVertex(1240, 1700, 1214, 1724, 1202, 1747);
            c.bezierVertex(1191, 1766, 1172, 1756, 1160, 1724);
            c.bezierVertex(1148, 1694, 1139, 1694, 1111, 1724);
            c.bezierVertex(1085, 1752, 1090, 1770, 1124, 1770);
            c.bezierVertex(1155, 1770, 1171, 1791, 1168, 1829);
            c.bezierVertex(1166, 1863, 1135, 1890, 1100, 1890);
            c.bezierVertex(1072, 1890, 1064, 1917, 1085, 1940);
            c.bezierVertex(1109, 1967, 1129, 1965, 1140, 1936);
            c.endShape();
            c.beginShape();
            c.vertex(1280, 1840);
            c.bezierVertex(1267, 1832, 1268, 1830, 1283, 1830);
            c.bezierVertex(1292, 1830, 1300, 1835, 1300, 1840);
            c.bezierVertex(1300, 1852, 1299, 1852, 1280, 1840);
            c.endShape();
            c.beginShape();
            c.vertex(1004, 1505);
            c.bezierVertex(965, 1466, 980, 1410, 1037, 1381);
            c.bezierVertex(1081, 1359, 1140, 1401, 1140, 1455);
            c.bezierVertex(1140, 1494, 1138, 1496, 1074, 1515);
            c.bezierVertex(1030, 1528, 1027, 1528, 1004, 1505);
            c.endShape();
            c.beginShape();
            c.vertex(1808, 1477);
            c.bezierVertex(1777, 1468, 1770, 1461, 1759, 1423);
            c.bezierVertex(1753, 1399, 1731, 1361, 1710, 1338);
            c.vertex(1673, 1296);
            c.vertex(1637, 1324);
            c.bezierVertex(1617, 1340, 1600, 1357, 1600, 1362);
            c.bezierVertex(1600, 1367, 1609, 1388, 1619, 1409);
            c.vertex(1639, 1447);
            c.vertex(1472, 1453);
            c.bezierVertex(1380, 1456, 1297, 1461, 1288, 1465);
            c.bezierVertex(1263, 1475, 1265, 1447, 1291, 1401);
            c.bezierVertex(1337, 1318, 1445, 1287, 1535, 1330);
            c.vertex(1581, 1352);
            c.vertex(1616, 1319);
            c.bezierVertex(1635, 1301, 1650, 1283, 1650, 1279);
            c.bezierVertex(1650, 1259, 1470, 1180, 1423, 1180);
            c.bezierVertex(1407, 1180, 1385, 1165, 1357, 1134);
            c.bezierVertex(1334, 1108, 1301, 1081, 1283, 1074);
            c.bezierVertex(1210, 1043, 1119, 1071, 1073, 1139);
            c.bezierVertex(1059, 1160, 1028, 1183, 990, 1201);
            c.bezierVertex(924, 1232, 841, 1309, 820, 1359);
            c.bezierVertex(813, 1376, 804, 1390, 799, 1390);
            c.bezierVertex(784, 1390, 490, 1114, 490, 1100);
            c.bezierVertex(490, 1095, 542, 1074, 606, 1053);
            c.bezierVertex(670, 1032, 725, 1009, 727, 1003);
            c.bezierVertex(730, 996, 718, 950, 702, 900);
            c.bezierVertex(666, 794, 658, 801, 805, 825);
            c.bezierVertex(962, 851, 961, 851, 976, 767);
            c.bezierVertex(979, 747, 986, 728, 990, 725);
            c.bezierVertex(994, 722, 1024, 756, 1056, 799);
            c.bezierVertex(1089, 843, 1118, 879, 1121, 879);
            c.bezierVertex(1124, 880, 1162, 828, 1206, 764);
            c.bezierVertex(1249, 700, 1294, 636, 1305, 623);
            c.vertex(1326, 598);
            c.vertex(1355, 720);
            c.bezierVertex(1372, 792, 1390, 844, 1398, 848);
            c.bezierVertex(1409, 852, 1643, 783, 1758, 742);
            c.bezierVertex(1777, 735, 1773, 758, 1729, 889);
            c.bezierVertex(1704, 963, 1692, 1016, 1697, 1021);
            c.bezierVertex(1703, 1027, 1736, 1026, 1781, 1021);
            c.bezierVertex(1918, 1002, 2201, 978, 2207, 984);
            c.bezierVertex(2213, 989, 2198, 1008, 2085, 1135);
            c.bezierVertex(1984, 1247, 1928, 1319, 1934, 1329);
            c.bezierVertex(1937, 1333, 1965, 1345, 1997, 1355);
            c.bezierVertex(2029, 1365, 2059, 1376, 2064, 1380);
            c.bezierVertex(2077, 1392, 1904, 1490, 1872, 1489);
            c.bezierVertex(1857, 1488, 1829, 1483, 1808, 1477);
            c.endShape();
            c.beginShape();
            c.vertex(1645, 1110);
            c.bezierVertex(1648, 1104, 1645, 1098, 1638, 1095);
            c.bezierVertex(1631, 1093, 1547, 1061, 1453, 1025);
            c.bezierVertex(1358, 989, 1275, 960, 1269, 960);
            c.bezierVertex(1221, 960, 1465, 1082, 1558, 1105);
            c.bezierVertex(1630, 1122, 1637, 1122, 1645, 1110);
            c.endShape();
            c.beginShape();
            c.vertex(930, 1412);
            c.bezierVertex(929, 1364, 992, 1309, 1047, 1311);
            c.bezierVertex(1074, 1312, 1074, 1312, 1041, 1322);
            c.bezierVertex(992, 1336, 964, 1357, 946, 1393);
            c.bezierVertex(938, 1411, 930, 1419, 930, 1412);
            c.endShape();
            c.fill(0, 0, 0);
            c.beginShape();
            c.vertex(1085, 1940);
            c.bezierVertex(1064, 1917, 1072, 1890, 1100, 1890);
            c.bezierVertex(1135, 1890, 1166, 1863, 1168, 1829);
            c.bezierVertex(1171, 1791, 1155, 1770, 1124, 1770);
            c.bezierVertex(1090, 1770, 1085, 1752, 1111, 1724);
            c.bezierVertex(1139, 1694, 1148, 1694, 1160, 1724);
            c.bezierVertex(1172, 1756, 1191, 1766, 1202, 1747);
            c.bezierVertex(1214, 1724, 1240, 1700, 1251, 1700);
            c.bezierVertex(1257, 1700, 1271, 1711, 1284, 1725);
            c.bezierVertex(1301, 1743, 1309, 1747, 1318, 1738);
            c.bezierVertex(1325, 1731, 1330, 1720, 1330, 1713);
            c.bezierVertex(1330, 1695, 1365, 1697, 1380, 1715);
            c.bezierVertex(1396, 1734, 1386, 1760, 1362, 1760);
            c.bezierVertex(1332, 1760, 1323, 1780, 1328, 1833);
            c.bezierVertex(1332, 1877, 1335, 1881, 1362, 1887);
            c.bezierVertex(1399, 1894, 1408, 1915, 1385, 1940);
            c.bezierVertex(1360, 1967, 1348, 1965, 1328, 1930);
            c.bezierVertex(1312, 1902, 1308, 1901, 1266, 1906);
            c.bezierVertex(1236, 1910, 1215, 1908, 1206, 1901);
            c.bezierVertex(1186, 1885, 1152, 1903, 1140, 1936);
            c.bezierVertex(1129, 1965, 1109, 1967, 1085, 1940);
            c.endShape();
            c.beginShape();
            c.vertex(1300, 1840);
            c.bezierVertex(1300, 1835, 1292, 1830, 1283, 1830);
            c.bezierVertex(1268, 1830, 1267, 1832, 1280, 1840);
            c.bezierVertex(1299, 1852, 1300, 1852, 1300, 1840);
            c.endShape();
            c.beginShape();
            c.vertex(1558, 1105);
            c.bezierVertex(1465, 1082, 1221, 960, 1269, 960);
            c.bezierVertex(1275, 960, 1358, 989, 1453, 1025);
            c.bezierVertex(1547, 1061, 1631, 1093, 1638, 1095);
            c.bezierVertex(1654, 1101, 1644, 1120, 1627, 1119);
            c.bezierVertex(1620, 1119, 1589, 1112, 1558, 1105);
            c.endShape();  
            c.popMatrix();
            
            return c;
        }
    },
    shipInterior: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.rectMode(CORNER);
            c.noStroke();
            c.fill(128, 60, 0);
            c.rect(0, 0, 40, 40);
            c.stroke(0);
            c.strokeWeight(2);
            c.strokeCap(SQUARE);
            c.line(0, 5, 40, 5);
            c.line(0, 25, 40, 25);
            c.line(0, 35, 40, 35);
            c.line(10, 5, 10, 25);
            c.line(30, 25, 30, 35);
            c.fill(0);
            c.ellipse(15, 10, 1, 1);
            c.ellipse(15, 20, 1, 1);
            c.ellipse(25, 30, 1, 1);
            c.ellipse(25, 40, 1, 1);
            c.fill(0, 0, 0, 50);
            c.noStroke();
            c.rect(0, 0, 25, 40);
            c.fill(0, 0, 0, 120);
            c.rect(0, 0, 40, 40);
            
            return c;
        }
    },
    sand: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.rectMode(CORNER);
            c.noStroke();
            c.fill(194, 168, 0);
            c.rect(0, 0, 40, 40);
            c.fill(230, 203, 51);
            c.ellipse(10, 10, 5, 5);
            c.ellipse(32, 36, 5, 5);
            c.ellipse(3, 25, 5, 5);
            c.ellipse(30, 10, 7, 7);
            c.fill(0, 0, 0, 50);
            c.triangle(0, 0, 0, 40, 40, 40);
            
            return c;
        }
    },
    ship: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.rectMode(CORNER);
            c.noStroke();
            c.fill(128, 60, 0);
            c.rect(0, 0, 40, 40);
            c.stroke(0);
            c.strokeWeight(2);
            c.strokeCap(SQUARE);
            c.line(0, 5, 40, 5);
            c.line(0, 25, 40, 25);
            c.line(0, 35, 40, 35);
            c.line(10, 5, 10, 25);
            c.line(30, 25, 30, 35);
            c.fill(0);
            c.ellipse(15, 10, 1, 1);
            c.ellipse(15, 20, 1, 1);
            c.ellipse(25, 30, 1, 1);
            c.ellipse(25, 40, 1, 1);
            c.fill(0, 0, 0, 50);
            c.noStroke();
            c.rect(0, 0, 25, 40);
            
            return c;
        }
    },
    nails: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.rectMode(CORNER);
            c.noStroke();
            c.fill(79, 79, 79);
            c.triangle(0, 40, 40, 40, 15, 0);
    
            c.fill(0, 0, 0, 50);
            c.triangle(0, 40, 25, 40, 15, 0);
            
            c.fill(79);
            c.triangle(15, 40, 35, 40, 40, 15);
            c.fill(0, 0, 0, 90);
            c.triangle(22, 40, 15, 40, 40, 15);
            
            return c;
        }
    },
    gem: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.noStroke();
            c.fill(105, 0, 196);
            c.triangle(5, 20, 20, 0, 20, 40);
            
            c.fill(136, 0, 255);
            c.triangle(35, 20, 20, 0, 20, 40);
            
            return c;
        }
    },
    coin: {
        width: 40,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.stroke(255, 179, 0);
            c.strokeWeight(2);
            c.fill(255, 255, 0);
            c.ellipse(20, 20, 30, 30);
            c.fill(255, 179, 0);
            c.textFont(createFont("Trebuchet MS"));
            c.textAlign(CENTER, CENTER);
            c.textSize(40);
            c.text("❂", 20, 20);
            
            return c;
        }
    },
    exit: {
        width: 40,
        height: 40,
        img: function(c) {
          
        c.background(0,0,0,0);
        c.noStroke();
         c. strokeWeight(7);
         c.stroke(50);
         c.strokeCap(SQUARE);
         c.line(0+5,0,0+5,0+39);
         c.noStroke();
         c.fill(200, 0, 0);
         c.triangle(0+9,0,0+9,0+30,0+38,0+15);
         c.fill(0,0,0,50);
        c. triangle(0+9,0+30,0+38,0+15,0+9,0+15);

            return c;
        }
    },
    player: {
        width: 45,
        height: 40,
        img: function(c) {
            c.background(0, 0, 0, 0);
            c.noStroke();
            c.fill(0, 135, 113);
            c.rect(0, 0, 40, 40);
            c.fill(255);
            c.ellipse(30, 15, 5, 5);
            c.ellipse(20, 15, 5, 5);
            
            c.fill(0,0,0,50);
            c.triangle(0,0,0,40,40,40);
            c.stroke(255);
            c.strokeWeight(2);
            c.fill(255, 255, 255, 90);
            c.rect(0, 8, 40, 15, 10);
            

            return c;
        }
    }
};
var Cache = {
    Bitmap: {
        
    },
    Sound: {
    }
};
var Loading = {
    draw: function() {
        var y = 1 - pow(1-x, 2);
        y = map(y, 0, 1, (cacheImageNo - 1) / Object.keys(PreCache).length, cacheImageNo / Object.keys(PreCache).length);
        background(0, 0, y * 75);
        if(frameCount % 8 === 0) {
            x = 0.1;
            var counter = 0;
            for(var i in PreCache) {
                if(counter === cacheImageNo) {
                    Cache.Bitmap[i] = cacheImage(PreCache[i].img, PreCache[i].width, PreCache[i].height);
                    cacheImageNo++;
                    break;
                }
                counter++;
            }
        }
        
        // Loading Screen
        noFill();
        stroke(125, 69, 0);
        strokeWeight(10);
        arc(width / 2, height / 2, width - 40, height - 40, 0, y * 360);
        stroke(230, 192, 0);
        arc(width / 2, height / 2, width - 140, height - 140, 0, 360 - y * 360);
        
                // Text
        colorMode(HSB);
        textAlign(CENTER, CENTER);
        textSize(35);
        textFont(createFont("Trebuchet MS Bold"));
        fill(110 + sin(frameCount * 3) * 100, 255, 255);
        if(frameCount % 50 === 0) {
            textSelection = round(random(0, 9));
        }
        switch(textSelection) {
            case 0:
                text("Digging for Gold...", width / 2, height / 2);
                break;
            case 1:
                text("Finding Lost Treasure...", width / 2, height / 2);
                break;
            case 2:
                text("Filling Ocean...", width / 2, height / 2);
                break;
            case 3:
                text("Chasing Sharks...", width / 2, height / 2);
                break;
            case 4:
                text("Destroying Other Pirates...", width / 2, height / 2);
                break;
            case 5:
                text("Polishing Gems...", width / 2, height / 2);
                break;
            case 6:
                text("Sinking Atlantis...", width / 2, height / 2);
                break;
            case 7:
                text("Drawing Flags...", width / 2, height / 2);
                break;
            case 8:
                text("Hoisting Sails...", width / 2, height / 2);
                break;
            case 9:
                text("Cleaning Eye Patch...", width / 2, height / 2);
                break;
        }
        
        colorMode(RGB);
        
        var counter2 = 0;
        for(var i in Cache.Bitmap) {
            if(counter2 === cacheImageNo -1) {
                image(Cache.Bitmap[i], width-10, height-10, 10, 10);
                if(counter2 === Object.keys(PreCache).length-1 && x >= 0.75) {
                    scene = "menu";
                }
                break;
            }
            counter2++;
        }
        if(x < 1) {
            x += 0.1;
        }
    }
};

var minScreenx;

var title = function(x,y) {
    textFont(createFont("Trebuchet MS Bold"));
    textSize(74);
    textAlign(CENTER,CENTER);
    fill(0,0,0,50);
    text("Under the",x+5,y+5);
    textSize(150);
    text("SEA",x,y+110+sin(frameCount*3)*5);
    fill(92, 182, 255);
    text("SEA",x,y+100+sin(frameCount*3)*5);
    fill(255);
    noStroke();
    textSize(74);
    text("Under the",x,y);

       fill(0,0,0,50);
        rect(0,200,width,height);
          fill(0,0,0,50);
        rect(0,441,width,height);
    
    
    
};

var button = function(x,y,txt,after) {

    textFont(createFont("Chalkboard Italic"));
    textAlign(CENTER,CENTER);
    strokeWeight(2);
    stroke(0);
    fill(255);
    if(mouseX > x-75 && mouseX < x+75 && mouseY < y+15 && mouseY > y-15) {
        fill(200);
    }
    if(mouseIsPressed && mouseX > x-75 && mouseX < x+75 && mouseY < y+15 && mouseY > y-15) {
        scene = after;   
    }
    (rect)(x-75, y-15, 150, 30, 0, 100, 0, 0); 
    fill(0);
    triangle(x-70,y-10,x-70,y+10,x-65,y);
    textSize(15);
    text(txt,x,y);
    
};

var keyPressed = function(){keys[keyCode] = true;};
var keyReleased = function(){keys[keyCode] = false;};


var Camera = function(x, y, w, h, viewX, viewY, levelWidth, levelHeight, speed){
    // Viewport on canvas
    this.x = x;
    this.y = y;
    this.w  = w;
    this.h = h;
    
    // Inside the viewport
    this.viewX = viewX;
    this.viewY = viewY;
    this.levelWidth = levelWidth;
    this.levelHeight = levelHeight;
    
    this.speed = this.speed || speed; // the lower the number, the faster the speed
}; // made by thomas l
Camera.prototype.follow = function(ent) {
    var x = -ent.x+this.x+(this.w/2)-(ent.w/2);
    var y = -ent.y+this.y+(this.h/2)-(ent.h/2);
    var a = atan2(y-this.viewY, x-this.viewX);
    var v = dist(x, y, this.viewX, this.viewY) / this.speed;
    
    this.viewX += v*cos(a);
    this.viewY += v*sin(a);

    var width  = this.x + this.w  - this.levelWidth;
    var height = this.y + this.h - this.levelHeight;
    
    this.viewX = min(this.viewX, this.x);
    this.viewX = max(this.viewX, width);
    this.viewY = min(this.viewY, this.y);
    this.viewY = max(this.viewY, height);
};
Camera.prototype.view = function(ent) {
    var viewX = -this.viewX+this.x,
        viewY = -this.viewY+this.y,
        viewW = ent.w-this.w,
        viewH = ent.w-this.h;

    if(ent.x >  viewX-ent.w &&
       ent.x <  viewX-viewW+ent.w && 
       ent.y >  viewY-ent.h &&
       ent.y <  viewY-viewH+ent.h)
    {
        var camView = {
            x: (this.viewX+ent.x),
            y: (this.viewY+ent.y),
            w: ent.w,
            h: ent.h,
            cam: this
        };
        
        return camView;
    }
};


var Block = function(x, y, type) {
    this.x = x;
    this.y = y;
    this.w = 40;
    this.h = 40;
    this.ignoreOnCollision =type ==='ship interior';
    this.type = type;
}; // kinds of blocks
Block.prototype.draw = function() {
    switch(this.type) {
        case "ship interior":
            image(Cache.Bitmap.shipInterior, this.x, this.y);
            break;
        case "sand":
            image(Cache.Bitmap.sand, this.x, this.y);
            break;
        case "ship":
            image(Cache.Bitmap.ship, this.x, this.y);
            break;
        case "nails":
            image(Cache.Bitmap.nails, this.x, this.y);
            break;
        case "gem":
            image(Cache.Bitmap.gem, this.x, this.y);
            break;
        case "coin":
            image(Cache.Bitmap.coin, this.x, this.y);
            break;
        case "exit":
            image(Cache.Bitmap.exit, this.x, this.y);
            break;
    }

}; //draws all those blocks 


var levels = [
    
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,3,2],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2],
        [0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2],
        [0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2],
        [0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,9,0,0,9,3,0,9,9,3,9,0,3,0,9,9,9,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,0,9,0,0,5,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,0],
        [0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,9,9,9,2,2,0,0,0,0,0,0,0,0,3,2,0,0,0,9,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0],
        [0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,0,0,9,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,9,0,0,0,0,0,9,0,0,9,0,9,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,3,2,9,0,0,5,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0],
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,9,0,0,0,5,9,5,5,0,9,0,2,2,2,0,0,3,0,0,0,0,0,0,2,0,0,0,9,5,0,0,0,9,0,0,0,9,0,0,9,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,9,0,0,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,0,0,0,0,0,0,0,0,0,0,9,0,0,9,0,2,2,2,2,0,0,0,0,0,2,0,0,9,9,9,0,0,9,0,9,5,0,0,0,0,5,2,2,0,0,5,5,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,6,2,2,0,0,0,0],
        [2,0,0,0,0,4,4,0,0,0,0,0,9,0,0,0,0,0,3,4,0,0,4,9,3,3,9,0,0,9,0,0,0,9,0,9,9,2,0,0,0,9,0,3,9,0,3,9,0,3,0,9,0,0,9,0,2,0,0,0,0,5,5,0,0,0,0,0,0,0,9,0,0,0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
    
    
    
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [0,0,0,0,0,0,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [1,0,0,0,0,0,2,9,4,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [1,0,0,0,0,0,2,4,4,0,9,0,0,0,0,9,9,9,0,9,0,0,0,0,9,9,0,0,0,0,0,0,9,9,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,9,9,0,0,3,0,0,0,0,0,0,0,0,0,9,9,2,9,0,0,0,0,0,2,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [1,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,9,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,2,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], 
        [1,0,0,0,0,0,0,2,5,0,9,0,0,0,0,9,0,0,0,0,9,0,0,0,0,9,0,0,0,0,0,0,0,0,0,5,9,2,2,2,0,0,0,2,2,4,4,4,0,2,0,0,0,0,9,0,9,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,2,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], 
        [1,1,0,0,0,0,0,0,2,0,9,0,0,0,0,9,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,0,0,9,2,2,0,0,0,0,0,0,0,0,2,2,0,0,2,0,0,0,0,9,0,0,5,0,9,0,0,0,0,2,3,2,2,2,2,2,2,0,0,0,0,0,0,0,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], 
        [1,1,0,0,0,0,0,0,2,0,9,0,3,0,0,9,0,0,3,0,9,0,0,3,0,0,0,9,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,2,0,0,0,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,9,0,0,9,5,5,5,2,0,0,0,0,0,0,0,2,9,9,9,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1], 
        [1,1,1,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,0,2,2,9,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1], 
        [1,1,1,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,9,9,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,0,9,0,0,9,0,0,0,0,0,0,0,0,0,0,0,9,9,2,0,0,0,0,0,0,0,2,9,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,6,1,1,1], 
        [1,1,1,1,1,0,0,3,0,0,9,0,0,0,0,9,9,0,0,0,0,2,0,0,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,5,5,0,2,2,2,2,0,0,3,0,4,0,3,0,0,0,3,3,0,0,9,0,0,0,2,0,0,0,9,0,0,0,0,5,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1], 
        [1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
        
        
        
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,9,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,0,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,2,0,2,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,0,9,9,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [0,0,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], 
        [0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,9,9,0,0,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], 
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], 
        [2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1], 
        [2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,2,9,0,0,2,0,0,0,2,2,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,1], 
        [2,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,9,9,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,0,0,9,2,0,0,2,2,0,0,0,0,2,2,0,0,0,0,0,2,9,2,2,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,6,1,1,1], 
        [2,9,9,0,0,0,0,0,0,0,0,0,2,2,3,3,3,3,3,3,2,2,0,0,0,0,0,9,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,0,0,0,0,0,0,0,9,0,0,9,4,2,0,2,2,3,3,3,3,2,2,3,3,3,3,2,2,9,0,0,2,0,0,3,0,0,0,0,3,0,0,0,3,0,2,2,2,1,1], 
        [2,2,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,2,2,1,1,1,1,1,2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,2,1,1,2,2,2,1,1,1,1,1]],
        
        
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,9,0,0,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,0,0,0,0,0,9,2,0,0,0,0,0,0,0,0,2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,2,0,2,0,3,3,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,9,0,9,0,0,0,2,0,0,0,0,0,0,0,0,0,2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,2,5,0,2,2,2,0,0,0,0,0,0,0,0,0,0,2,9,0,0,0,0,0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,2,9,0,9,0,0,9,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,2,4,0,0,0,3,3,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,1,0,0,0,0,0,0,0,0,0,2,5,0,0,0,2,0,0,0,0,0,0,0,2,0,9,0,0,9,0,0,9,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,1,0,0,0,0,0,0,0,0,0,2,2,9,9,9,2,0,0,0,0,0,0,2,9,0,9,0,0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,0,0,0,9,9,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
        [1,1,1,0,0,0,0,0,0,0,0,2,0,0,0,2,2,0,0,0,0,0,2,0,0,9,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,0,0,0,9,9,0,0,0,0,0,2,0,0,9,0,0,9,0,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
        [1,1,1,1,0,0,0,0,0,0,0,9,0,0,0,0,2,0,0,0,0,2,0,0,0,0,9,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,2,2,3,3,3,3,2,0,0,0,9,0,0,9,0,0,0,0,2,2,2,0,0,0,0,0,9,9,0,5,0,5,0,5,0,5,0,5,0,5,0,6,0,0,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,1,1,2,1,2,2,1,2,2,2,1,1,2,2,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
        
        [[1,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,2,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,0,9,0,0,9,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,2,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,0,0,0,0,9,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,1],
        [1,0,0,0,0,0,0,2,0,0,0,0,0,0,9,0,0,9,0,0,0,9,0,9,9,9,0,0,0,0,9,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,2,0,0,0,0,9,0,0,0,0,9,0,0,9,0,0,0,0,0,9,0,0,9,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,6,2,2,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,1],
        [1,0,0,0,0,0,0,0,2,0,0,9,3,0,0,0,3,0,9,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,9,2,2,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,1],
        [1,1,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,9,0,0,0,0,0,9,0,9,0,0,9,0,0,0,0,0,0,9,0,0,2,2,0,0,0,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,9,0,2,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,1],
        [1,1,1,0,0,0,0,0,0,2,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,0,9,0,0,0,0,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,9,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
        [1,1,1,0,0,0,5,5,5,5,9,0,0,0,0,9,0,0,0,9,9,0,0,0,3,0,9,3,0,0,3,0,9,0,0,3,0,0,0,9,0,0,9,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,9,9,0,9,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
        
        
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,9,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,9,0,0,9,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,9,0,0,2,9,9,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0],
        [2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0],
        [9,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,9,0,2,0,0,9,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0],
        [0,9,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,9,9,0,0,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0],
        [0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,9,0,0,0,2,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0],
        [0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,0,0,9,9,2,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0],
        [0,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,9,2,9,9,0,0,0,2,0,9,0,0,9,0,0,0,4,0,2,2,0,0,0,0,0],
        [9,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,2,2,0,0,3,0,0,9,0,0,9,3,9,0,0,0,4,6,0,2,2,0,0,0,0],
        [2,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,2,2,3,3,3,3,3,2,2,3,3,3,3,3,2,2,3,3,3,3,3,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,2,2,1,1,1,2,2,1,2,2,2,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
        
        [[0,0,0,0,0,0,2,2,2,2,2,9,9,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,2,0,9,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,2,9,0,0,0,2,0,0,9,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,4,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,0,0,0,0,0,0,0,0,0,0,2,9,9,9,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,9,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,0,0,0,0,2,9,9,0,0,9,9,9,2,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,0,0,0,0,2,9,9,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,0,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,0,0,0,0,0,2,9,0,0,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,9,9,2,2,2,2,2,0,0,3,0,0,3,0,0,0,3,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,0,0,0,0,0,2,9,9,9,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,0,0,0,9,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,9,5,5,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,9,0,0,2,0,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,9,0,0,5,5,0,9,0,0,0,0,9,0,0,0,0,9,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,9,0,2,0,0,0,0,0,0,0,0,0,0,1,1],
        [2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,0,2,2,2,2,2,2,2,2,0,2,0,2,2,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1],
        [2,0,0,0,0,0,0,0,0,0,0,0,2,0,9,0,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,0,0,0,9,0,0,9,0,2,0,2,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,0,0,2,0,0,0,0,0,0,0,0,0,0,6,1,1,1],
        [2,2,2,2,2,2,2,2,0,0,0,0,9,0,0,9,2,2,2,2,3,3,3,3,1,3,3,3,3,1,3,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,9,0,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
        [9,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
        
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,3,2,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,2,2,2,2,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,0,0,0,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,2,0,0,0,0,0,0,3,3,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,2,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,9,0,0,9,9,0,2,0,4,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,4,4,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,9,9,9,9,0,2,0,0,0,2,0,9,9,9,0,9,0,0,0,2,0,0,0,0,0,0,0,9,9,9,0,0,0,0,2,2,0,0,2,9,4,4,4,4,4,4,4,9,9,2,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,2,0,0,0,0,2,0,9,0,9,0,0,9,0,0,2,0,0,0,0,0,0,0,0,0,9,9,0,0,2,0,0,0,0,2,9,4,9,2,2,2,2,4,9,9,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,1,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,9,0,9,3,9,3,2,9,9,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,4,9,9,4,4,4,4,2,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1],
        [1,1,1,1,0,0,0,0,0,3,2,3,2,3,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,2,2,2,2,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,0,0,0,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,1,1,0,0,0,0,3,0,0,0,3,3,0,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,1,1,2,2,1,1,1,1]],
        
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,0,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,9,9,9,5,5,5,5,5,4,4,4,4,4,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,9,9,9,5,5,5,5,5,4,4,4,4,4,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,2,2,2,2,0,0,9,0,9,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,9,9,9,9,9,9,9,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,2,2,2,2,9,0,0,9,9,0,9,0,9,9,0,9,0,9,9,9,0,9,0,9,0,9,0,5,4,5,0,9,9,9,0,9,0,9,9,0,9,9,9,9,9,9,9,9,9,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,9,9,9,0,9,9,9,9,9,9,9,9,2,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,9,9,9,0,9,0,9,0,0,9,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,9,9,9,5,5,5,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,0,9,9,9,0,9,9,9,3,9,4,4,4,2,0,0,0,6,1],
        [1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,9,0,0,9,9,9,0,0,9,0,0,9,9,0,9,0,9,9,0,9,0,0,0,9,9,9,0,9,0,0,0,9,9,0,9,9,5,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,9,9,9,9,0,9,2,2,2,2,2,2,2,0,0,0,1,1],
        [1,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,9,9,2,2,9,0,0,3,3,0,9,9,0,9,0,0,9,0,9,0,0,9,0,0,0,9,0,9,0,9,0,0,9,9,9,9,9,4,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,9,9,3,9,9,3,9,9,9,3,9,2,1,1,1,1,1],
        [1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,0,0,3,0,0,2,2,2,2,0,9,0,3,0,0,3,9,0,0,0,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1], 
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
        
        
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [0,2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [2,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,9,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1],
        [2,1,0,0,0,0,0,2,2,9,9,9,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,9,9,9,0,2,2,0,0,0,1,1,1,2,2,2,0,2,2,0,0,1,1,1],
        [2,1,1,0,0,0,2,0,2,9,9,2,9,9,9,0,0,2,2,2,3,1,1,3,3,2,9,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,9,3,9,9,0,0,0,0,0,3,3,1,1,1,1,1,1],
        [1,1,1,1,1,1,2,2,3,2,2,9,9,9,9,9,3,0,0,2,0,2,2,0,2,0,0,2,2,9,0,0,0,1,1,1,1,1,1,1,1,1,1,2,3,3,3,2,2,3,1,3,1,1,3,1,2,2,2,1,1,0,3,5,2,5,2,0,0,0,0,5,5,2,2,2,4,4,4,4,4,4,0,0,0,3,3,3,3,3,3,3,3,0,1,1,1,3,1,1]],
        

        
        [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
        [1,0,0,0,0,0,0,0,0,2,2,9,2,1,1],
        [1,1,0,0,0,0,2,2,2,4,5,5,5,1,1],
        [1,1,1,0,2,9,4,4,5,5,4,4,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]
 
        
        
        



];

var drawStage = function() {
    minScreenx = (levels[currentLevel][0].length - 15) * -40;
    for(var p = 0; p < levels[currentLevel].length; p++){
        for(var a = 0; a < levels[currentLevel][p].length; a++){
            switch(levels[currentLevel][p][a]){
                case 9: 
                    blocks.push(new Block(a * 40, p * 40, 'ship interior'));     
                break;
                case 1:
                    blocks.push(new Block(a * 40, p * 40, 'sand'));
                break;
                case 2:
                    blocks.push(new Block(a * 40, p * 40, 'ship'));
                break;
                case 3:
                    blocks.push(new Block(a * 40, p * 40, 'nails'));
                break;
                case 4:
                    blocks.push(new Block(a * 40, p * 40, 'gem'));   
                break;
                case 5:
                    blocks.push(new Block(a * 40, p * 40, 'coin'));     
                break;
                case 6:
                    blocks.push(new Block(a*40, p *40, 'exit'));
                break;

            }
        }
        
    }
}; 
drawStage();
var Player = function(){
    
    this.x = 160;
    this.y = 485;
    this.w = 40;
    this.h = 40;
    this.xvel = 0;
    this.yvel = 0;
    this.falling = true;
    
    this.gravity = 0.175;
    this.jumpHeight = 6;
    this.maxFallSpeed = 2;
    
    this.moveSpeed = 0.3;
    this.maxMoveSpeed = 3;
    this.facingDirection  = "r";
    this.ignoreOnCollision = Block.type === 9;
    
    this.update = function(platforms){

        if(keys[LEFT]){
            this.facingDirection ="l";
            this.xvel -= this.moveSpeed;
        }
        if(keys[RIGHT]){
            this.facingDirection  = "r";
            this.xvel += this.moveSpeed;
        }
        if(this.y +this.h > 600) {
            this.x = 160;
            this.y = 485;
            screenx = 0;
            screeny= 0;
        }
        

        
        if(!keys[LEFT] && !keys[RIGHT]){
            
            if(this.xvel > 0){
                
                this.xvel -= this.moveSpeed;
            }
            
            if(this.xvel < 0){
                
                this.xvel += this.moveSpeed;
            }
            
            if(this.xvel < 0.5 && this.xvel > 0){
                
                this.xvel = 0;
            }
            
            if(this.xvel > -0.5 && this.xvel < 0&& this.x > 20 && this.x < 580){
                
                this.xvel = 0;
            }
        }

        if(keys[UP] && !this.falling){
            
            this.yvel = -this.jumpHeight;
        }
        
        this.yvel += this.gravity;
        
        if(this.yvel > this.maxFallSpeed){
            
            this.yvel = this.maxFallSpeed;
        }
        
        if(this.xvel > this.maxMoveSpeed ){
            
            this.xvel = this.maxMoveSpeed;
        }
            
        if(this.xvel < -this.maxMoveSpeed  ){
            
            this.xvel = -this.maxMoveSpeed;
        }
        
        this.x += this.xvel;

        this.collideWith(this.xvel, 0, blocks);

        this.falling = true;
        
        this.y += this.yvel;

        this.collideWith(0, this.yvel, blocks);
        
        
       
    };

    this.collideWith = function(xv, yv, platforms){
        
       
        for (var i = 0; i < blocks.length; i++){
            var p = blocks[i];

            if( this.y + this.h > p.y && this.y < p.y + p.h && this.x + this.w > p.x && this.x < p.x + p.w){
                if(p.ignoreOnCollision) {
                        
                    
                }
                else {
                if(yv > 0){
                    this.yvel = 0;
                    this.falling = false;
                    this.y = p.y - this.h;
                    
                    if(blocks[i].type === 'gem'){
                        numOfGems ++;  
                        blocks[i].x = Infinity;
                    }
                    if(blocks[i].type === 'coin') {
                        numOfCoins++;   
                        blocks[i].x = Infinity;
                    }
                    if(blocks[i].type === 'nails'){
                        this.x = 160;
                        this.y = 445;
                        screenx = 0;
                        screeny = 0;
                    }
                    if(blocks[i].type === 'exit'){
                        blocks = [];
                        currentLevel++;
                        drawStage();

                        this.x = 160;
                        this.y = 445;
                        screenx = 0;
                        screeny = 0;
                        
                        return;
                    }
                }

                if(yv < 0) {
                    this.yvel = 0;
                    this.falling = true;
                    this.y = p.y + p.h;
                    
                    if(blocks[i].type === 'gem'){
                        numOfGems++;
                        blocks[i].x = Infinity;
                    }
                    if(blocks[i].type === 'coin') {
                        numOfCoins++;   
                        blocks[i].x = Infinity;
                    }
                    if(blocks[i].type === 'nails'){
                        this.x = 160;
                        this.y = 445;
                        screenx = 0;
                        screeny = 0;
                    }
                    if(blocks[i].type === 'exit'){
                        blocks = [];
                        currentLevel++;
                        drawStage();

                        this.x = 160;
                        this.y = 445;
                        screenx = 0;
                        screeny = 0;
                        
                        return;
                    }
                }

                if(xv > 0) {
                    this.xvel = 0;
                    this.x = p.x - this.w;
                    
                    if(blocks[i].type === 'gem'){
                        numOfGems++;
                        blocks[i].x = Infinity;
                    }
                    if(blocks[i].type === 'coin') {
                        numOfCoins++;  
                        blocks[i].x = Infinity;
                    }
                    if(blocks[i].type === 'nails'){
                        this.x = 160;
                        this.y = 445;
                        screenx = 0;
                        screeny = 0;
                    }
                    if(blocks[i].type === 'exit'){
                        blocks = [];
                        currentLevel++;
                        drawStage();

                        this.x = 160;
                        this.y = 445;
                        screenx = 0;
                        screeny = 0;
                        
                        return;
                    }
                }

                if(xv < 0) {
                    this.xvel = 0;
                    this.x = p.x + p.w;
                    
                    if(blocks[i].type === 'gem'){
                        numOfGems++;
                        blocks[i].x = Infinity;
                    }
                    if(blocks[i].type === 'coin') {
                        numOfCoins++; 
                        blocks[i].x = Infinity;
                    }
                    if(blocks[i].type === 'nails'){
                        this.x = 160;
                        this.y = 445;
                        screenx = 0;
                        screeny = 0;
                    }
                    if(blocks[i].type === 'exit'){
                        blocks = [];
                        currentLevel++;
                        drawStage();
 
                        this.x = 160;
                        this.y = 445;
                        screenx = 0;
                        screeny = 0;
                        
                        return;
                    }

                }
            }
            }
        }
        
    };

    this.draw = function() {
        pushMatrix();
            translate(this.x, this.y);
            if(this.facingDirection === "l") {
                scale(-1, 1);
                translate(-this.w, 0);
            }
            image(Cache.Bitmap.player, 0, 0);
        popMatrix();
    };
    
};//complicated player physics


var p = new Player();


var c = new Camera();

noStroke();
{
var darkbrown = function() {fill(122, 66, 44);};
var dbrowns = function() {stroke(102, 49, 28);};
var lightbrown = function() {fill(133, 80, 45);};
var lbrowns = function() {stroke(133, 80, 45);};
var black = function() {fill(0, 0, 0);};
var blacks = function() {stroke(0, 0, 0);};
var transblue = function() {fill(204, 255, 255, 100);};
var tblues = function() {stroke(204, 255, 255, 100);};
var sand = function() {fill(179, 136, 50);};
var shadow = function() {fill(0, 0, 0, 25);};
var shadow2 = function() {fill(0, 0, 0, 50);};
var darkdarkbrown = function() {fill(74, 40, 25);};
var darkdarkdarkbrown = function() {fill(66, 35, 18);};
}

//masts
var masts = function(){

//front mast
darkbrown();
quad(412, 381, 386, 380, 451, 36, 450, 112);//front mast
quad(510, 137, 532, 137, 375, 110, 393, 121);//cross piece
shadow2();
triangle(510, 137, 532, 137, 375, 110);
triangle(450, 36, 412, 381, 450, 112);


//middle mast
darkbrown();
quad(572, 411, 597, 394, 624, 9, 609, 80);
shadow();
quad(572, 411, 597, 394, 624, 9, 609, 80);
darkbrown();
quad(726, 131, 709, 119, 531, 101, 514, 106);
shadow();
quad(726, 131, 709, 119, 531, 101, 514, 106);
shadow2();
triangle(726, 131, 709, 119, 531, 101);

};

//pirate ship wreck graphic
var piratewreck = function(){

//bowsprit
pushMatrix();
rotate(6);
translate(18, -28);
beginShape();
lightbrown();
vertex(318, 387);
bezierVertex(8, 361, -43, 349, -147, 320);
bezierVertex(100, 357, 7, 330, 322, 371);
endShape();
beginShape();
shadow();
strokeWeight(2);
vertex(318, 387);
bezierVertex(8, 361, -43, 349, -147, 320);
bezierVertex(100, 357, 7, 330, 322, 371);
endShape();
popMatrix();

//brig base
noStroke();
lightbrown();
pushMatrix();
translate(304, 249);
scale(1.5);
beginShape();
curveVertex(-146, 56); 
curveVertex(-127, 78); 
curveVertex(-109, 81); 
curveVertex(-75, 68);
curveVertex(-31, 74);
curveVertex(117, 89);
curveVertex(199, 95); 
curveVertex(199, 100);
curveVertex(199, 192); 
curveVertex(197, 198); 
curveVertex(137, 195); 
curveVertex(24, 189); 
curveVertex(-46, 182);
curveVertex(-73, 152);
curveVertex(-90, 118);
curveVertex(-117, 100);
curveVertex(-142, 77);
curveVertex(-141, 60); 
curveVertex(-127, 78); 
curveVertex(-111, 81);
endShape();
popMatrix();

//ship layer 2
pushMatrix();
scale(0.87);
translate(76, 69);
pushMatrix();
quad(600, 546, 600, 432, 179, 374, 202, 525);
strokeWeight(2);
dbrowns();
shadow();
arc(477, 398, 682, 401, 137, 190);
noFill();
//outline and board lines
arc(606, 371, 1177, 370, 109, 136);
arc(591, 353, 1177, 370, 88, 136);
arc(580, 338, 1177, 370, 87, 136);
arc(573, 323, 1177, 370, 86, 136);
arc(566, 305, 1177, 370, 86, 136);
arc(562, 286, 1177, 370, 86, 136);
arc(591, 267, 1262, 378, 89, 136);
arc(591, 253, 1262, 378, 86, 136);
noStroke();
shadow();
triangle(231, 537, 477, 398, 656, 417);
popMatrix();
popMatrix();

//touch up ellipse
pushMatrix();
rotate(6);
lightbrown();
ellipse(487, 350, 507, 29);
popMatrix();


};

//sand mostly
var seafloor = function(){

sand();
quad(600, 600, 600, 546, 0, 489, 0, 600);

shadow2();
quad(600, 600, 600, 546, 0, 513, 479, 600);
triangle(0, 512, 204, 549, 600, 500);


};

//extra details
var extraDetails = function(){

//ghosty drifty thingies...
noFill();
tblues();
strokeWeight(2);
strokeWeight(1.4);
bezier(208, 338, 258, 299, 451, 180, 417, 123);
bezier(202, 312, 273, 299, 424, 180, 409, 123);
bezier(208, 338, 258, 299, 451, 180, 417, 124);
bezier(276, 338, 258, 299, 448, 180, 421, 125);
bezier(295, 365, 261, 317, 448, 169, 426, 126);
bezier(70, 326, 300, 258, 389, 126, 379, 112);
bezier(93, 333, 300, 258, 389, 126, 384, 117);
bezier(103, 333, 300, 258, 401, 126, 389, 119);
bezier(115, 364, 300, 258, 368, 111, 389, 118);
bezier(148, 364, 300, 258, 396, 180, 401, 122);
bezier(123, 373, 300, 258, 396, 140, 394, 121);

bezier(449, 40, 433, 96, 386, 114, 377, 111);
bezier(448, 51, 433, 96, 386, 114, 393, 112);
bezier(446, 60, 433, 96, 409, 115, 401, 114);
bezier(445, 67, 433, 96, 426, 115, 411, 116);

bezier(523, 103, 569, 91, 598, 104, 622, 13);
bezier(539, 102, 569, 91, 595, 115, 622, 23);
bezier(551, 102, 592, 94, 595, 115, 622, 31);
bezier(561, 104, 592, 99, 604, 115, 619, 49);

bezier(522, 107, 536, 133, 361, 353, 313, 338);
bezier(540, 109, 536, 135, 476, 247, 309, 366);
bezier(548, 110, 536, 237, 497, 247, 317, 366);
bezier(579, 114, 536, 203, 435, 247, 339, 371);
bezier(568, 112, 536, 285, 408, 247, 352, 371);
bezier(583, 114, 541, 299, 458, 247, 363, 375);
bezier(593, 116, 541, 299, 458, 335, 381, 375);

bezier(-67, 489, 81, 448, 72, 339, 68, 347);
bezier(-26, 489, 82, 437, 70, 361, 76, 348);
bezier(-12, 489, 87, 453, 70, 361, 85, 350);
bezier(3, 489, 87, 453, 129, 385, 134, 360);
bezier(3, 489, 85, 451, 108, 394, 110, 355);
bezier(3, 489, 87, 453, 92, 369, 88, 353);
bezier(37, 491, 87, 453, 92, 447, 125, 397);
bezier(57, 494, 76, 466, 91, 470, 138, 406);
bezier(63, 494, 76, 466, 91, 495, 138, 406);
bezier(63, 494, 76, 488, 91, 495, 155, 415);
bezier(82, 494, 106, 486, 124, 504, 169, 427);

//hole in the hull
fill(102, 49, 28);
noStroke();
quad(468, 540, 344, 533, 326, 463, 434, 489);
quad(469, 540, 344, 533, 305, 506, 393, 450);
quad(469, 540, 344, 533, 350, 506, 473, 504);

pushMatrix();
translate(42, 53);
scale(0.9);
darkdarkbrown();
quad(468, 540, 344, 533, 326, 463, 434, 489);
quad(469, 540, 344, 533, 305, 506, 393, 450);
quad(469, 540, 344, 533, 350, 506, 473, 504);
popMatrix();

pushMatrix();
translate(109, 134);
scale(0.75);
darkdarkdarkbrown();
quad(468, 540, 344, 533, 326, 463, 434, 489);
quad(469, 540, 344, 533, 305, 506, 393, 450);
quad(469, 540, 344, 533, 350, 506, 473, 504);
popMatrix();
};

//bubbles
var bubbles = function(x, y){

strokeWeight(3);
stroke(0, 123, 255, 75);
fill(209, 250, 255, 50);
ellipse(x+100, y+100, 10, 10);
ellipse(x+116, y+111, 10, 10);
ellipse(x+93, y+123, 15, 15);
ellipse(x+106, y+143, 10, 10);
ellipse(x+124, y+132, 7, 7);
ellipse(x+114, y+83, 7, 7);
ellipse(x+133, y+161, 20, 20);
ellipse(x+114, y+178, 12, 12);
ellipse(x+100, y+162, 7, 7);
ellipse(x+94, y+188, 7, 7);
ellipse(x+131, y+198, 15, 15);
ellipse(x+108, y+211, 13, 13);

};

//barnacles
var barnacles = function(x,y){
pushMatrix();
fill(77, 47, 30);
scale(0.07);
translate(x, y);
stroke(84, 58, 33);
strokeWeight(22);
beginShape();
curveVertex(-67,-17); 
curveVertex(8,-67); 
curveVertex(83,-2); 
curveVertex(55,73);
curveVertex(-27,70); 
curveVertex(-67,-17);
curveVertex(8,-67); 
curveVertex(83,-2); 
endShape();
popMatrix();
noStroke();
};

var ship = function() {
      pushMatrix();
{
    noStroke();
masts();
seafloor();
piratewreck();
extraDetails();
barnacles(5000, 6659);
barnacles(5320, 6542);
barnacles(4677, 6773);
barnacles(4600, 7044);
barnacles(4470, 6824);
barnacles(4468, 7267);
barnacles(4694, 7414);
barnacles(4527, 7510);
barnacles(2513, 5500);
barnacles(2582, 5860);
barnacles(2388, 5743);
barnacles(2286, 5502);
barnacles(2365, 5293);
barnacles(2606, 6075);
barnacles(2724, 6306);
barnacles(2684, 5670);
barnacles(2802, 5447);
barnacles(2990, 5614);
barnacles(2879, 5810);


pushMatrix();
scale(1.2);
bubbles(5, 44);
scale(0.9);
bubbles(292, 219);
scale(1.1);
bubbles(210, -127);
popMatrix();
}
popMatrix();  
    
};

var menu = function() {
    image(Cache.Bitmap.bg, 0, 0);
    ship();
    title(300,100);  
    button(90+sin(frameCount*5)*6,410,"New game","game");
    button(120+sin(frameCount*6)*5,460,"Plot","plot");
    button(90+sin(frameCount*5)*6,510,"How To","how to");
    button(120+sin(frameCount*6)*5,560,"Credits","credits");
    image(Cache.Bitmap.pirate, 520, 530);
    textFont(createFont("Trebuchet MS Bold"));
    fill(255);
    text("Cαptαιn\nProductions",480,560);

};

var plot = function() {
    noStroke();
    image(Cache.Bitmap.bg, 0, 0);  
    ship();
    textFont(createFont("Trebuchet MS Bold"));
    textSize(30);
    textAlign(CENTER,CENTER);
    fill(255, 255, 255);
    text("You are Diver Amelia Jackson.\nYou have been commisioned to\ninvestigate the ruins of a\nrecently discovered pirate frigate\nfound at the bottom of the \nIndian Ocean. Recover any kind of\ntreasure you find there, such as\ngems and gold dubloons.",300,200);
           fill(0,0,0,50);
           noStroke();
        rect(0,200,width,height);
          fill(0,0,0,50);
        rect(0,441,width,height);
    button(500,570,"Back","menu");
};

var how = function() {
    noStroke();
    image(Cache.Bitmap.bg, 0, 0);  
    ship();
    textFont(createFont("Trebuchet MS Bold"));
    textSize(30);
    textAlign(CENTER,CENTER);
    fill(255, 255, 255);
    text("Use the arrow keys to move.\n Collect all the gems and coins. \nOnce you have them all,\n feel free to move on.\n Dying places you at the\n beginning of the stage.",300,200);
               fill(0,0,0,50);
               noStroke();
        rect(0,200,width,height);
          fill(0,0,0,50);
        rect(0,441,width,height);
    button(500,570,"Back","menu");
     
    
  
};

var credits = function() {
    noStroke();
    image(Cache.Bitmap.bg, 0, 0);
    ship();
    textFont(createFont("Trebuchet MS Bold"));
    textSize(25);
    textAlign(CENTER,CENTER);
    fill(255, 255, 255);
    text("This was just initially another one of my WIP's\n with a ton of bugs that I had no idea how\n to fix, but now it's so much more than that.\n Becuase thanks to KCF and Blue Leaf,\n and Tegoon, the game works now.\n Thanks Blue Leaf for fixing the respawn\n and the camera function,\n thanks (  a lot ) KCF for helping reduce the lag,\n and big thanks to\n MarshmallowDragon for drawing the ship.\n:D",300,300);
               fill(0,0,0,50);
               noStroke();
        rect(0,200,width,height);
          fill(0,0,0,50);
        rect(0,441,width,height);
    button(500,570,"Back","menu");   
};

draw = function() {
    if(scene === "loading") {
        Loading.draw();
    }
    if(scene === "menu") {
    menu();   
    }
    if(scene === "game") {
        image(Cache.Bitmap.bg, 0, 0);
        ship();
      
pushMatrix();

screenx = constrain(screenx, minScreenx, 0);
translate(screenx,screeny);

       
        
        for(var i = 0; i < blocks.length; i++){
            blocks[i].draw();
        }
                   p.draw(); //draws player
       
            p.update(blocks); //collision updater
    popMatrix();
   
    if (p.x+screenx>300||p.x+screenx<200){
        screenx-=p.xvel;
    }
  
    
            fill(255);
            textSize(30);
            textFont(createFont("Trebuchet MS Bold"));
        text("Gems: " +numOfGems + "",90,50);
        text("Coins: " +numOfCoins + "",230,50);
        if(currentLevel ===7) {
            textFont(createFont("Trebuchet MS Bold"));
            colorMode(HSB);
            fill(110 + sin(frameCount * 3) * 100, 255, 255);
            text("Level designed by Mitrue",200,100);
            colorMode(RGB);
        }
                if(currentLevel ===8) {
            textFont(createFont("Trebuchet MS Bold"));
            colorMode(HSB);
            fill(110 + sin(frameCount * 3) * 100, 255, 255);
            text("Level designed by Breck Nave",250,100);
            colorMode(RGB);
        }
        if(currentLevel ===9) {
            textFont(createFont("Trebuchet MS Bold"));
            colorMode(HSB);
            fill(110 + sin(frameCount * 3) * 100, 255, 255);
            text("Level designed by LiVeRpOoL",250,100);
            colorMode(RGB);
        }
        if(currentLevel === 10) {
            textFont(createFont("Trebuchet MS Bold"));
            textSize(70);
            textAlign(CENTER,CENTER);
            title(300,100);
            
            fill(0,0,0,fade);
            rect(0,0,width,height);
            fade --;
            
        }

        fill(0,0,0,30);
        rect(0,0,width,height);
    }
    if(scene === "plot") {
        plot();
        
    }
    if(scene === "how to") {
        how();
    }
    if(scene === "credits") {
        credits();
        
    }
    
};//NEW RECORD! :P
