var skipLogo = false;

var scene = "logo";

var Logo = function(editing){
    this.editing = editing || false;
    if(!this.editing){
        this.i = 0;
        this.message = "Cαptαιn";
        this.fade = 0;
        this.timer = 0;
        
        this.bgColor = color(122);
        
        this.clouds = [];
        this.cloud = function(x, y, sz){
            noStroke();
            pushMatrix();
            translate(x, y);
            scale(sz/10);
            rectMode(CENTER);
            fill(245);
            rect(0, 0, 100, 20, 30);
            ellipse(-25, -13, 30, 23);
            ellipse(25, -13, 40, 33);
            ellipse(0, -19, 50, 50);
            fill(230);
            (rect)(-25, 0, 50, 20, 30, 0, 0, 30);
            arc(0, -19, 50, 50, -270, -90);
            ellipse(-25, -13, 30, 23);
            rectMode(CORNER);
            popMatrix();
        };
        this.newCloud = function(array){
            array.push([random(0, 500), random(0, 300), random(5, 15)]);
        };
        
        this.pirate = function(x, y){
            //Generated by DY's SVG converter
            pushMatrix();
            translate(x,y);
            scale(0.1);
            rotate(180);
            noStroke();
            fill(0);
            beginShape();
            vertex(1255, 2123);
            bezierVertex(1164, 2113, 1065, 2053, 1030, 1985);
            bezierVertex(984, 1896, 865, 1815, 692, 1754);
            bezierVertex(663, 1744, 641, 1731, 643, 1725);
            bezierVertex(648, 1710, 864, 1616, 999, 1570);
            bezierVertex(1194, 1504, 1305, 1486, 1525, 1485);
            bezierVertex(1734, 1485, 1800, 1495, 1960, 1554);
            vertex(2045, 1585);
            vertex(1963, 1591);
            bezierVertex(1904, 1595, 1866, 1605, 1826, 1624);
            bezierVertex(1764, 1655, 1686, 1734, 1654, 1801);
            bezierVertex(1642, 1825, 1620, 1870, 1605, 1901);
            bezierVertex(1534, 2049, 1394, 2137, 1255, 2123);
            endShape();
            beginShape();
            vertex(1140, 1936);
            bezierVertex(1152, 1903, 1186, 1885, 1206, 1901);
            bezierVertex(1215, 1908, 1236, 1910, 1266, 1906);
            bezierVertex(1308, 1901, 1312, 1902, 1328, 1930);
            bezierVertex(1348, 1965, 1360, 1967, 1385, 1940);
            bezierVertex(1408, 1915, 1399, 1894, 1362, 1887);
            bezierVertex(1335, 1881, 1332, 1877, 1328, 1833);
            bezierVertex(1323, 1780, 1332, 1760, 1362, 1760);
            bezierVertex(1386, 1760, 1396, 1734, 1380, 1715);
            bezierVertex(1365, 1697, 1330, 1695, 1330, 1713);
            bezierVertex(1330, 1720, 1325, 1731, 1318, 1738);
            bezierVertex(1309, 1747, 1301, 1743, 1284, 1725);
            bezierVertex(1271, 1711, 1257, 1700, 1251, 1700);
            bezierVertex(1240, 1700, 1214, 1724, 1202, 1747);
            bezierVertex(1191, 1766, 1172, 1756, 1160, 1724);
            bezierVertex(1148, 1694, 1139, 1694, 1111, 1724);
            bezierVertex(1085, 1752, 1090, 1770, 1124, 1770);
            bezierVertex(1155, 1770, 1171, 1791, 1168, 1829);
            bezierVertex(1166, 1863, 1135, 1890, 1100, 1890);
            bezierVertex(1072, 1890, 1064, 1917, 1085, 1940);
            bezierVertex(1109, 1967, 1129, 1965, 1140, 1936);
            endShape();
            beginShape();
            vertex(1280, 1840);
            bezierVertex(1267, 1832, 1268, 1830, 1283, 1830);
            bezierVertex(1292, 1830, 1300, 1835, 1300, 1840);
            bezierVertex(1300, 1852, 1299, 1852, 1280, 1840);
            endShape();
            beginShape();
            vertex(1004, 1505);
            bezierVertex(965, 1466, 980, 1410, 1037, 1381);
            bezierVertex(1081, 1359, 1140, 1401, 1140, 1455);
            bezierVertex(1140, 1494, 1138, 1496, 1074, 1515);
            bezierVertex(1030, 1528, 1027, 1528, 1004, 1505);
            endShape();
            beginShape();
            vertex(1808, 1477);
            bezierVertex(1777, 1468, 1770, 1461, 1759, 1423);
            bezierVertex(1753, 1399, 1731, 1361, 1710, 1338);
            vertex(1673, 1296);
            vertex(1637, 1324);
            bezierVertex(1617, 1340, 1600, 1357, 1600, 1362);
            bezierVertex(1600, 1367, 1609, 1388, 1619, 1409);
            vertex(1639, 1447);
            vertex(1472, 1453);
            bezierVertex(1380, 1456, 1297, 1461, 1288, 1465);
            bezierVertex(1263, 1475, 1265, 1447, 1291, 1401);
            bezierVertex(1337, 1318, 1445, 1287, 1535, 1330);
            vertex(1581, 1352);
            vertex(1616, 1319);
            bezierVertex(1635, 1301, 1650, 1283, 1650, 1279);
            bezierVertex(1650, 1259, 1470, 1180, 1423, 1180);
            bezierVertex(1407, 1180, 1385, 1165, 1357, 1134);
            bezierVertex(1334, 1108, 1301, 1081, 1283, 1074);
            bezierVertex(1210, 1043, 1119, 1071, 1073, 1139);
            bezierVertex(1059, 1160, 1028, 1183, 990, 1201);
            bezierVertex(924, 1232, 841, 1309, 820, 1359);
            bezierVertex(813, 1376, 804, 1390, 799, 1390);
            bezierVertex(784, 1390, 490, 1114, 490, 1100);
            bezierVertex(490, 1095, 542, 1074, 606, 1053);
            bezierVertex(670, 1032, 725, 1009, 727, 1003);
            bezierVertex(730, 996, 718, 950, 702, 900);
            bezierVertex(666, 794, 658, 801, 805, 825);
            bezierVertex(962, 851, 961, 851, 976, 767);
            bezierVertex(979, 747, 986, 728, 990, 725);
            bezierVertex(994, 722, 1024, 756, 1056, 799);
            bezierVertex(1089, 843, 1118, 879, 1121, 879);
            bezierVertex(1124, 880, 1162, 828, 1206, 764);
            bezierVertex(1249, 700, 1294, 636, 1305, 623);
            vertex(1326, 598);
            vertex(1355, 720);
            bezierVertex(1372, 792, 1390, 844, 1398, 848);
            bezierVertex(1409, 852, 1643, 783, 1758, 742);
            bezierVertex(1777, 735, 1773, 758, 1729, 889);
            bezierVertex(1704, 963, 1692, 1016, 1697, 1021);
            bezierVertex(1703, 1027, 1736, 1026, 1781, 1021);
            bezierVertex(1918, 1002, 2201, 978, 2207, 984);
            bezierVertex(2213, 989, 2198, 1008, 2085, 1135);
            bezierVertex(1984, 1247, 1928, 1319, 1934, 1329);
            bezierVertex(1937, 1333, 1965, 1345, 1997, 1355);
            bezierVertex(2029, 1365, 2059, 1376, 2064, 1380);
            bezierVertex(2077, 1392, 1904, 1490, 1872, 1489);
            bezierVertex(1857, 1488, 1829, 1483, 1808, 1477);
            endShape();
            beginShape();
            vertex(1645, 1110);
            bezierVertex(1648, 1104, 1645, 1098, 1638, 1095);
            bezierVertex(1631, 1093, 1547, 1061, 1453, 1025);
            bezierVertex(1358, 989, 1275, 960, 1269, 960);
            bezierVertex(1221, 960, 1465, 1082, 1558, 1105);
            bezierVertex(1630, 1122, 1637, 1122, 1645, 1110);
            endShape();
            beginShape();
            vertex(930, 1412);
            bezierVertex(929, 1364, 992, 1309, 1047, 1311);
            bezierVertex(1074, 1312, 1074, 1312, 1041, 1322);
            bezierVertex(992, 1336, 964, 1357, 946, 1393);
            bezierVertex(938, 1411, 930, 1419, 930, 1412);
            endShape();
            fill(255, 255, 255);
            beginShape();
            vertex(1085, 1940);
            bezierVertex(1064, 1917, 1072, 1890, 1100, 1890);
            bezierVertex(1135, 1890, 1166, 1863, 1168, 1829);
            bezierVertex(1171, 1791, 1155, 1770, 1124, 1770);
            bezierVertex(1090, 1770, 1085, 1752, 1111, 1724);
            bezierVertex(1139, 1694, 1148, 1694, 1160, 1724);
            bezierVertex(1172, 1756, 1191, 1766, 1202, 1747);
            bezierVertex(1214, 1724, 1240, 1700, 1251, 1700);
            bezierVertex(1257, 1700, 1271, 1711, 1284, 1725);
            bezierVertex(1301, 1743, 1309, 1747, 1318, 1738);
            bezierVertex(1325, 1731, 1330, 1720, 1330, 1713);
            bezierVertex(1330, 1695, 1365, 1697, 1380, 1715);
            bezierVertex(1396, 1734, 1386, 1760, 1362, 1760);
            bezierVertex(1332, 1760, 1323, 1780, 1328, 1833);
            bezierVertex(1332, 1877, 1335, 1881, 1362, 1887);
            bezierVertex(1399, 1894, 1408, 1915, 1385, 1940);
            bezierVertex(1360, 1967, 1348, 1965, 1328, 1930);
            bezierVertex(1312, 1902, 1308, 1901, 1266, 1906);
            bezierVertex(1236, 1910, 1215, 1908, 1206, 1901);
            bezierVertex(1186, 1885, 1152, 1903, 1140, 1936);
            bezierVertex(1129, 1965, 1109, 1967, 1085, 1940);
            endShape();
            beginShape();
            vertex(1300, 1840);
            bezierVertex(1300, 1835, 1292, 1830, 1283, 1830);
            bezierVertex(1268, 1830, 1267, 1832, 1280, 1840);
            bezierVertex(1299, 1852, 1300, 1852, 1300, 1840);
            endShape();
            beginShape();
            vertex(1558, 1105);
            bezierVertex(1465, 1082, 1221, 960, 1269, 960);
            bezierVertex(1275, 960, 1358, 989, 1453, 1025);
            bezierVertex(1547, 1061, 1631, 1093, 1638, 1095);
            bezierVertex(1654, 1101, 1644, 1120, 1627, 1119);
            bezierVertex(1620, 1119, 1589, 1112, 1558, 1105);
            endShape();  
            popMatrix();
    };
        
       
        
        //saving the images into imgs.
        background(255);
        background(0, 0, 0, 0);
        this.pirate(225, 215);
        this.pirateImg = get(0, 0, 185, 160);
        
        background(255);
        background(0, 0, 0, 0);
        fill(this.bgColor);
        this.cloud(200, 275, 33, 47);
        this.cloudImg = get(0, 0, 400, 400);
        
      
        
       
        
    }
    background(255);
};
Logo.prototype.draw = function(){
    if(this.editing){
        this.draw = function() {
            
        };
        return;
    }
    imageMode(CENTER);
     strokeWeight(11);
        for(var i = 0; i < height; i += 10){
            stroke(lerpColor(color(102, 0, 255), color(255), i/height));
            line(0, i, width, i);
        }
   
    for(var i = 0, len = this.clouds.length; i < len; i ++){
        pushMatrix();
        translate(this.clouds[i][0], this.clouds[i][1]);
        scale(this.clouds[i][2]/35);
        image(this.cloudImg, 0, 0);
        
        this.clouds[i][0] += 0.2;
        if(this.clouds[i][0] > width + this.clouds[i][2]*40/2){
            this.clouds[i][0] = -this.clouds[0][2]*40/2 ;
        }
        popMatrix();
    }
    if(this.clouds.length < 10){
        this.newCloud(this.clouds);
    }
        
  

fill(0,0,0,50);
rect(0, 0, 500, 500);
    image(this.pirateImg, 250, 250+sin(frameCount*5)*3);
    
    
    
    
    textFont(createFont("Arial Bold"));
    textAlign(CENTER,CENTER);
    textSize(55);
    fill(0,0,0,50);
    
    text(this.message.substring(0, this.i), 255, 354);
    fill(0, 0, 0);
    
    text(this.message.substring(0, this.i), 250, 350);
    this.i += 0.1;
    if(this.i > this.message.length - 1) {
        this.fade ++;   
    }
    fill(0, 0, 0, this.fade);
    textSize(16);
    text("Productions", 285, 380);
    
    this.timer ++;
    if(this.timer > 350) {
        scene = "menu";   
    }
};
var logo = new Logo(false);

var Xs = [];
var Ys = [];
var Ss = [];
for(var i = 0;i < 100;i ++){
    Xs.push(random(0,600));
    Ys.push(random(0,500));
    Ss.push(random(1,10));
}
var fade = 255;

var deathShadowX = 0;


var x= -20;
var rot = 0;

var randoNum = floor(random(1,3));

var blocks = [];
var keys = [];

var currentLevel = 0;

var starrySky = function() {

  for(var i = 0;i < Xs.length;i ++){
        noStroke();
        fill(255);
        
        ellipse(Xs[i]+sin(frameCount+i*0.74+Ys[i])*26,Ys[i]+sin(millis()/10+i*3.7+ 1.3469-Ss[i])*6,Ss[i],Ss[i]);
    }

}; 

var begin = function() {
    textFont(createFont("Trebuchet MS"));
    textSize(43);
    textAlign(CENTER,CENTER);
    fill(102, 0, 255);
    
    text("BEGIN",250,350);
    if(mouseX > 250-60 && mouseX < 250 + 60 && mouseY > 350-20 && mouseY < 350 +20) {
    stroke(0);
    strokeWeight(4);
   noFill();
    arc(160,345,40,40,0,rot);
    rot+=3;
    if(rot >=370) {
        scene ="game";    
    }
    }
    else {
        rot = 0;
    }
    if(mouseIsPressed && mouseX > 250-60 && mouseX < 250 + 60 && mouseY > 350-20 && mouseY < 350 +20) {
        scene = "game";    
    }
    
};

var tree = function(x,y,num) {
   
    if(num === 1) {
            noStroke();
    fill(125, 58, 161);
    ellipse(x,y,50,50);   
    fill(0,0,0,50);
    arc(x,y,50,50,270,450);
    stroke(69);
    strokeWeight(7);
    strokeCap(SQUARE);
    line(x,y+25,x,y+65);    
    }
    if(num === 2) {
        noStroke();
    fill(125, 58, 161);
    rectMode(CORNER);
    rect(x-15,y-45,30,90,8);
    fill(0,0,0,50);
    (rect)(x,y-45,15,90,0,20,20,0);
     stroke(69);
    strokeWeight(7);
    strokeCap(SQUARE);
    line(x,y+45,x,y+65);   
    }
    if(num === 3) {
         noStroke();
    fill(125, 58, 161);
    triangle(x-20,y+50,x+20,y+50,x,y-50);
    fill(0,0,0,50);
    triangle(x,y+50,x+20,y+50,x,y-50);
        stroke(69, 69, 69);
    strokeWeight(7);
    strokeCap(SQUARE);
    line(x,y+50,x,y+65);   
    }
};



var bg =  function() {
      strokeWeight(11);
        for(var i = 0; i < height; i += 10){
            stroke(lerpColor(color(102, 0, 255), color(255), i/height));
            line(0, i, width, i);
        }
    starrySky();
    noStroke();
    fill(55, 0, 158);
    triangle(-124,500,500,500,212,100);
    fill(0,0,0,50);
    triangle(212,100,500,500,212,500);
    
    pushMatrix();
        scale(0.3);
        tree(462,691,3);
        tree(636,564,3);
        tree(864,798,3);
    popMatrix();
};

var title = function(x,y) {
    textFont(createFont("Trebuchet MS"));
    textAlign(CENTER,CENTER);
    textSize(100);
  
    
    for(var bluh =0; bluh < 360; bluh +=20) {
            fill(255,255,255, bluh/10);
                text("L U X", 250 + sin(bluh)*10, 120 + cos(bluh)*10);    
    }
    fill(0);
    text("L U X",250,120);
};

var keyPressed = function(){keys[keyCode] = true;};
var keyReleased = function(){keys[keyCode] = false;};

var Block = function(x, y, type){
    
    this.x = x;
    this.y = y;
    this.w = 40;
    this.h = 40;
    this.type = type;
}; //kinds of blocks
Block.prototype.draw = function(){
    
    switch(this.type){
        
        case 'grass':
            rectMode(CORNER);
            noStroke();
               fill(0, 3, 97);
               rect(this.x,this.y,50,50);
               fill(133, 5, 61);
               rect(this.x,this.y,50,25);
               fill(0,0,0,50);
               triangle(this.x,this.y,this.x,this.y+50,this.x+50,this.y+50);
          
            
        break;
        case 'treeGrass':
            rectMode(CORNER);
            noStroke();
           fill(0, 3, 97);
           rect(this.x,this.y,50,50);
           fill(133, 5, 61);
           rect(this.x,this.y,50,25);
           fill(0,0,0,50);
           triangle(this.x,this.y,this.x,this.y+50,this.x+50,this.y+50);
           tree(this.x+25,this.y-66,randoNum);
            
            
         
            
        break;
        case 'exit':
            noStroke();
         stroke(0);
         strokeWeight(7);
         strokeCap(SQUARE);
         line(this.x+5,this.y,this.x+5,this.y+49);
         noStroke();
         fill(200, 0, 0);
         triangle(this.x+9,this.y,this.x+9,this.y+30,this.x+38,this.y+15);
         fill(0,0,0,50);
         triangle(this.x+9,this.y+30,this.x+38,this.y+15,this.x+9,this.y+15);
            
            //line(180,250,230,225);
            //line(180,200,230,225);
        

        break;
        case 'thorns':
          noStroke();
          fill(133, 5, 61);
            triangle(this.x,this.y+50,this.x+50,this.y+50,this.x+25,this.y);
            fill(0,0,0,50);
            triangle(this.x,this.y+50,this.x+25,this.y+50,this.x+25,this.y);
        break;
        case 'dirt':
            noStroke();
             fill(0, 3, 97);
               rect(this.x,this.y,50,50);    
        break;
        case 'darkness':
          noStroke();
          
            
            fill(31, 31, 31);
            
            rect(this.x, this.y, 50, 50);
            
            fill(0,0,0,50);
            rect(this.x,this.y+0,50,15);
            
               stroke(46, 45, 46);
               strokeWeight(2);
          noFill();
          arc(this.x+10,this.y+10,10,10,-180,0);
          arc(this.x+22,this.y+31,7,7,-180,0);
         
          arc(this.x+30,this.y+15,6,6,-180,0);
        break;

     
    }
}; //draws all those blocks 


var levels = [
[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,3],
[1,1,2,1,1,2,1,1,1,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,3],
[1,1,2,4,4,4,1,2,1,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,3],
[0,0,0,0,0,0,0,0,0,1],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,2,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,2,0,0,0,1,0,0],
[1,2,4,4,4,4,4,4,4,4]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,3],
[0,0,0,0,0,0,1,1,2,1],
[0,0,0,0,0,1,5,5,5,5],
[0,0,0,0,1,5,5,5,5,5],
[1,1,2,1,1,1,1,1,1,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,3],
[0,0,0,0,0,0,0,0,0,1],
[0,0,0,0,0,0,0,1,1,5],
[0,0,0,0,0,1,1,5,5,5],
[0,0,0,0,1,5,5,5,5,5],
[0,0,1,1,5,5,5,5,5,5],
[2,1,5,5,5,5,5,5,5,5]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,1,4,4,4,4,1,0,3],
[1,1,5,5,5,5,5,5,1,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,2,0,0,0,0],
[0,0,0,0,1,5,0,0,0,3],
[1,1,1,1,5,5,1,1,1,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,3],
[1,1,1,1,6,6,6,1,1,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,3],
[0,0,1,2,0,0,0,0,1,5],
[0,0,5,5,6,6,6,6,5,5],
[1,1,5,5,5,5,5,5,5,5]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,6,0,6,0,6,0,6,3],
[1,1,6,1,6,1,6,1,6,1]],

[[6,6,6,0,6,0,6,0,0,6],
[6,0,6,0,0,6,0,0,0,6],
[6,0,0,0,0,6,0,0,0,0],
[6,6,6,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[6,0,0,0,0,0,0,0,0,0],
[6,6,0,0,0,0,0,0,0,0],
[6,0,0,0,0,0,0,0,0,0],
[6,0,0,0,0,0,0,0,0,3],
[1,1,1,6,6,4,4,2,6,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,3],
[0,0,0,0,0,0,1,6,6,1],
[1,2,1,4,4,4,5,5,5,5]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,3],
[0,0,1,4,4,4,4,4,1,1],
[1,1,5,5,5,5,5,5,5,5]],

[[0,0,0,0,0,0,0,0,0,3],
[0,0,0,5,5,5,5,5,5,5],
[0,0,0,0,0,0,0,0,0,0],
[5,5,5,5,5,5,5,5,5,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,5,5,5,5,5,5,5,5],
[0,0,0,0,0,0,0,0,0,0],
[5,5,5,5,5,5,5,5,0,0],
[0,0,0,0,0,0,0,0,0,0],
[1,1,1,1,1,1,1,1,1,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,3,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,0,0,1],
[0,0,0,0,0,0,0,2,0,0],
[0,0,0,0,0,1,0,0,0,0],
[0,0,0,1,0,0,0,0,0,0],
[1,1,1,4,4,4,4,4,4,4]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,6,6,0,0,0,3],
[1,1,6,6,6,6,1,2,1,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,3,0],
[1,2,1,4,4,4,4,1,1,1]],

[[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0]]
   
]; //the levels

var drawStage = function(){
    blocks = [];
    for(var p = 0; p < levels[currentLevel].length; p++){
        for(var a = 0; a < levels[currentLevel][p].length; a++){
            switch(levels[currentLevel][a][p]){
                case 1:
                    blocks.push(new Block(p * 50, a * 50, 'grass'));
                break;
                case 2:
                    blocks.push(new Block(p * 50, a * 50, 'treeGrass'));
                break;
                case 3:
                    blocks.push(new Block(p * 50, a * 50, 'exit'));
                break;
                case 4:
                    blocks.push(new Block(p * 50, a * 50, 'thorns'));    
                break;
                case 5:
                    blocks.push(new Block(p*50,a*50,'dirt'));
                break;
                case 6: 
                    blocks.push(new Block(p*50,a*50,'darkness'));
                break;
            }
        }
    }
}; //this sifts through the array, and finds the numbers, each number draws a different block
drawStage();
var Player = function(){
    
    this.x = 40;
    this.y = 20;
    this.w = 30;
    this.h = 30;
    this.xvel = 0;
    this.yvel = 0;
    this.falling = true;
    
    this.gravity = 0.3;
    this.jumpHeight = 8;
    this.maxFallSpeed = 10;
    
    this.moveSpeed = 0.5;
    this.maxMoveSpeed = 5;
    this.facingDirection = "r";
    
    this.update = function(platforms){

        if(keys[LEFT]){
            
            this.xvel -= this.moveSpeed;
            this.facingDirection = "l";
        }
        if(keys[RIGHT]){
            
            this.xvel += this.moveSpeed;
            this.facingDirection = "r";
        }
        if(this.x < 0) {
        this.x = 0;    
        }
        if(this.x + this.w > width) {
        this.x = width - this.w;    
        }
        if(!keys[LEFT] && !keys[RIGHT]){
            
            if(this.xvel > 0){
                
                this.xvel -= this.moveSpeed;
            }
            
            if(this.xvel < 0){
                
                this.xvel += this.moveSpeed;
            }
            
            if(this.xvel < 0.1 && this.xvel > 0){
                
                this.xvel = 0;
            }
            
            if(this.xvel > -0.1 && this.xvel < 0&& this.x > 20 && this.x < 580){
                
                this.xvel = 0;
            }
        }

        if(keys[UP] && !this.falling){
            
            this.yvel = -this.jumpHeight;
        }
        
        this.yvel += this.gravity;
        
        if(this.yvel > this.maxFallSpeed){
            
            this.yvel = this.maxFallSpeed;
        }
        
        if(this.xvel > this.maxMoveSpeed ){
            
            this.xvel = this.maxMoveSpeed;
        }
            
        if(this.xvel < -this.maxMoveSpeed  ){
            
            this.xvel = -this.maxMoveSpeed;
        }
        
        this.x += this.xvel;

        this.collideWith(this.xvel, 0, blocks);

        this.falling = true;
        
        this.y += this.yvel;

        this.collideWith(0, this.yvel, blocks);
        
       
    };

    this.collideWith = function(xv, yv, platforms){
        
       
        for (var i = 0; i < blocks.length; i++){
            var p = blocks[i];
            if( this.y + this.h > p.y && this.y < p.y + p.h && this.x + this.w > p.x && this.x < p.x + p.w){
                
                if(yv > 0){
                    this.yvel = 0;
                    this.falling = false;
                    this.y = p.y - this.h;
                    
                    if(blocks[i].type === 'exit'){
                        currentLevel++;
                        drawStage();
                        this.x = 40;
                        this.y = 420;
                        deathShadowX = 0;
                        return;
                    }
                    
                    if(blocks[i].type === 'thorns'){
                        this.x = 40;
                        this.y = 420;
                    }
                    if(blocks[i].type === 'darkness'){
                        this.x = 40;
                        this.y = 420;
                    }
                    if(this.x <= deathShadowX) {
                        this.x = 40;
                        this.y = 420;  
                        deathShadowX = 0;
                    }
            
                  
                }

                if(yv < 0) {
                    this.yvel = 0;
                    this.falling = true;
                    this.y = p.y + p.h;
                    
                    if(blocks[i].type === 'exit'){
                        currentLevel++;
                        drawStage();
                        this.x = 40;
                        this.y = 420;
                        deathShadowX = 0;
                        return;
                    }
                    
                    if(blocks[i].type === 'thorns' ){
                        this.x = 40;
                        this.y = 420;
                    }
                     if(blocks[i].type === 'darkness'){
                        this.x = 40;
                        this.y = 420;
                    }
                      if(this.x <= deathShadowX) {
                        this.x = 40;
                        this.y = 420;
                        deathShadowX = 0;
                    }
                }

                if(xv > 0) {
                    this.xvel = 0;
                    this.x = p.x - this.w;
                    
                    if(blocks[i].type === 'exit'){
                        currentLevel++;
                        drawStage();
                        this.x = 40;
                        this.y = 420;
                        deathShadowX = 0;
                        return;
                    }
                    
                    if(blocks[i].type === 'thorns'){
                        this.x = 40;
                        this.y =420;
                    }
                     if(blocks[i].type === 'darkness'){
                        this.x = 40;
                        this.y = 420;
                    }
                      if(this.x <= deathShadowX) {
                        this.x = 40;
                        this.y = 420;  
                        deathShadowX = 0;
                    }
                }

                if(xv < 0) {
                    this.xvel = 0;
                    this.x = p.x + p.w;
                    
                    if(blocks[i].type === 'exit'){
                        currentLevel++;
                        drawStage();
                        this.x = 40;
                        this.y = 420;
                        deathShadowX = 0;
                        return;
                    }
                    
                    if(blocks[i].type === 'thorns'){
                        this.x = 40;
                        this.y = 420;
                    }
                     if(blocks[i].type === 'darkness'){
                        this.x = 40;
                        this.y = 420;
                    }
                      if(this.x <= deathShadowX) {
                        this.x = 40;
                        this.y = 420;  
                        deathShadowX = 0;
                    }
                }
            }
        }
        
    };
    
    this.draw = function(){
        rectMode(CORNER);
     noStroke();
    fill(0, 0, 0);
   //(rect)(this.x,this.y,30,30,10,10,0,0);
   rect(this.x,this.y,30,30,10);
    fill(255, 255, 255);
    ellipse(this.x+15,this.y+20,7,7);
    if(this.facingDirection === "r") {
    
    ellipse(this.x+25,this.y+20,5,5);
    }
    else if(this.facingDirection === "l") {
     ellipse(this.x+5,this.y+20,5,5);   
    }
    };
    
};//complicated player physics


var p = new Player();




draw = function() {
    if(scene ==="logo") {
        if(skipLogo ===false) {
        logo.draw();   
        }
        if(skipLogo) {
            scene = "menu";   
        }
    }
    if(scene === "menu") {
        background(54, 143, 116);
        bg();
        begin();
        title(250,100);
        textSize(50);
        fill(255, 255, 255);
        text("(A Platformer)",250,198);
        tree(357,300,1);
        tree(438,300,2);
        tree(100,300,3);
         noStroke();
    fill(0);
    ellipse(x+15,352,30,30);
    fill(255, 255, 255);
    ellipse(x+16,355,7,7);
    ellipse(x+28,355,5,5);
    x+=4;
    if(x >=520) {
        x =  -20;    
    }
    noStroke();
    fill(133, 5, 61);
    rect(0,366,width,150);
    
    fill(0, 3, 97);
    rect(0,400,width,100);
    fill(0,0,0,50);
    triangle(0,400,0,500,200,500);
    triangle(500,0,298,0,500,330);
       
        
    }
    
    if(scene === "game") {
      bg();
      
      
           p.draw(); //draws player
       
            p.update(blocks); //collision updater
       
        
        for(var i = 0; i < blocks.length; i++){
            blocks[i].draw();
        }
        textFont(createFont("Times New Roman"));
        textAlign(CENTER); 
        textSize(25);
        fill(255);
        if(currentLevel ===0) {
            text("You are Alive.",216,383);  
            textSize(15);
            text("Don't touch that.",67,200);
       
        }
        textSize(25);
        if(currentLevel === 1) {
            text("What are you?",223,437);    
       
        }
        if(currentLevel === 2) {
            text("You are the Darkness.",210,330);   
       
        }
        if(currentLevel === 3) {
            text("Who am I?",200,281);    
        
        }
        if(currentLevel === 4) {
          text("I am the Darkness.",127,292);  

        }
        if(currentLevel === 5) {
            text("You may be trying to reach the light,",234,374); 
 
        }
        if(currentLevel === 6) {
            text("But you are Darkness,\n and must rejoin the Darkness.",231,200);    

        }
        if(currentLevel === 7) {
            text("Ah. There you are.",250,250);    

        }
        if(currentLevel === 8) {
            text("That's us down there.\n Where we came from.",250,100);

        }
        if(currentLevel === 9) {
            text("The Darkness.",250,250);    

        }
        if(currentLevel === 10) {
            text("You must rejoin us. We are not whole.",250,250);    

        }
        if(currentLevel === 11) {
            text("We will find you, \nno matter where you are.",250,250);    

        }
        if(currentLevel === 12) {
            text("This new world is too harsh for you.\nYou cannot hide forever.",250,250);   

        }
        if(currentLevel === 13) {
            text("The Darkness inside you leads you to us. \nWe see...the shadows of your mind..",250,250);    
        }
        if(currentLevel === 14) {
            text("It's hopeless. You will never reach the light.",260,200);    
        }
        if(currentLevel === 15) {
            text("There is no escape...",150,250);    
        }
        if(currentLevel === 16) {
            text("You will never make it.",200,200);    
        }
        fill(40);
        rect(0,0,deathShadowX,height);
        deathShadowX +=0.3;
      
    }//end game bracket
    if(currentLevel === 17) {
        
        bg();
        pushMatrix();
        scale(2);
        translate(-125,-6);
        title(176,250);
        popMatrix();
        textFont(createFont("Times New Roman"));
        fill(255);
        textSize(30);
        text("Thank you for playing.",250,350);
        fill(0,0,0,fade);
        rect(0,0,width,height);
        fade--;
        }
};
